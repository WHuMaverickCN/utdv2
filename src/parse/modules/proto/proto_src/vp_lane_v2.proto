/**

* @file     vp_lane_v2.proto
* @author   zhanghongjie
* @details  BEV freespace相关信号的输出接口定义
* @date     2023-05-29
* @version  V1.0
* @copyright(C),changan,2050

**********************************************************************************

* @attention 信号注释规则：

* ///<name ：[uint],(default,min,max),[max_number],(factor,offset),description 

* ///<信号名称：[单位]、(默认值、最小值、最大值)、[repeated最大值]、（因数，偏移量）、信号描述

* ///<coordinate:  COORDINATE_SYSTEM_VEHICLE_BASE 

* ///<车辆坐标系 原点：车辆后轴 右手法则
  *

* @par      修改日志：

* <table>

* <tr><th>date              <th>version             <th>author

* <tr><th>2023.5.29         <th>1.0                 <th>zhanghongjie

* <table>

**********************************************************************************
*/
// See README.txt for information and build instructions.
//
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
//
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials


syntax = "proto3";
package VpNdmProtoV2;
import "vp_ndm_base_v2.proto";



/**
* @brief bev 车道线信息
* @detail TODO
*/
enum LaneDirection {
  ///< proto信号 ,[/],(0,0,1),[/],(1,0),proto信号
  LaneDirection_Unknown = 0;    
  ///< proto信号 ,[/],(0,0,1),[/],(1,0),proto信号  
  LaneDirection_Forward = 2;      
  ///< proto信号 ,[/],(0,0,1),[/],(1,0),proto信号
  LaneDirection_Backward = 4;     
  ///< proto信号 ,[/],(0,0,1),[/],(1,0),proto信号
  LaneDirection_Bidirection = 8; 
  ///< proto信号 ,[/],(0,0,1),[/],(1,0),proto信号
  LaneDirection_Tidal = 16;       
}

/**
* @brief bev 车道线信息
* @detail TODO
*/
enum LaneTransition {
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  LaneTransition_Unknown = 0;
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  LaneTransition_Continue = 2;    
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  LaneTransition_Merging = 4;     
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  LaneTransition_Splitting = 8;   
}

/**
* @brief bev 车道线信息
* @detail TODO
*/
message LaneAttr {
  ///< proto信号:[/],(0,0,1),[/],(1,0),none
  optional float curvature = 1;    
  ///< proto信号:[/],(0,0,1),[/],(1,0),none
  optional float slope = 2;         
  ///< proto信号:[/],(0,0,1),[/],(1,0),none
  optional float banking = 3;       
  ///< proto信号:[/],(0,0,1),[/],(1,0),none
  optional float heading_angle = 4;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),none
  optional float offset = 5;        
  ///< proto信号:[/],(0,0,1),[/],(1,0),none
  optional float width = 6;         
}

/**
* @brief bev 车道线信息
* @detail TODO
*/
message LaneRestriction {
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated  VehicleType vehicle_types = 1;
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated  SpeedLimit speed_limits = 2;
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated  TimeLimit time_limits = 3;
  ///< proto信号:[/],(0,0,1),[/],(1,0),spread and inference, see LaneMarkingType
  repeated int32 lanemarking_types = 4;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),spread and inference, see TrafficSignType
  repeated int32 trafficsign_types = 5;    
  ///< proto信号:[/],(0,0,1),[/],(1,0),upper bound, need lower than this
  optional float weight_limit = 10;   
  ///< proto信号:[/],(0,0,1),[/],(1,0),upper bound, need lower than this
  optional float height_limit = 11;   
}


/**
* @brief bev 车道线信息
* @detail TODO
*/
message Lane {
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  optional int32 id = 1;
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  optional string str_id = 2;
  ///< proto信号:[/],(0,0,1),[/],(1,0),left laneline ids of the lane
  repeated string l_laneline_ids = 3;   
  ///< proto信号:[/],(0,0,1),[/],(1,0),right laneline ids of the lane
  repeated string r_laneline_ids = 4;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),driveline id of the lane
  optional string driveline_id = 5;    
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  optional LaneDirection direction = 6;
  ///< proto信号:[/],(0,0,1),[/],(1,0),lanetransition
  optional LaneTransition transition = 10;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),lanegeometry
  repeated LaneAttr attrs = 11; 
  ///< proto信号:[/],(0,0,1),[/],(1,0),length
  optional float lane_length = 12;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),lanetype
  optional uint64 type = 13;   
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated   Link objs = 14;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated   Link obstacles = 15;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated string pred_ids = 20;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated string succ_ids = 21;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated string left_ids = 22;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated string right_ids = 23; 
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  repeated LaneRestriction restrictions = 30;  
  ///< proto信号:[/],(0,0,1),[/],(1,0),proto信号
  optional VpNdmProtoV2.Polygon bounding_polygon = 31;      
}

