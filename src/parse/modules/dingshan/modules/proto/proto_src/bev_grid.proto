/**
* @file     bev_grid.proto
* @author   bev
* @details  视觉感知消息输出接口
* @date     2024-02-01
* @version  V1.0
* @copyright(C),changan,2050
**********************************************************************************
* @attention 信号注释规则：
* ///<name ：[uint],(default,min,max),[max_number],(factor,offset),description 
* ///<信号名称：[单位]、(默认值、最小值、最大值)、[repeated最大值]、（因数,偏移量）、信号描述
* ///<coordinate:  COORDINATE_SYSTEM_VEHICLE_BASE 
* ///<车辆坐标系 原点：车辆后轴 右手法则
*
* @par      修改日志：
* <table>
* <tr><th>date              <th>version             <th>author
* <tr><th>2024.02.01        <th>42                   <th>bev 
* <table>
**********************************************************************************
*/


syntax = "proto3";
package BevGrid;
import "bev_std.proto";
import "bev_geometry.proto";
import "seq_header.proto";


/**
 * @brief  TitleName.
 * @detail 坐标轴名称
 */
enum TitleName {
  ///< X轴
  TITLE_NAME_X = 0;
  ///< Y轴
  TITLE_NAME_Y = 1;
  ///< Z轴
  TITLE_NAME_Z = 2;
  ///< 时间轴
  TITLE_NAME_T = 3;
}

/**
 * @brief  Grid LayerProperty.
 * @detail 栅格层属性
 */
message LayerProperty {
  ///< 层的名字：[/],(/,/,/),[/],(/,/),层的名字
   string layer_name = 1;

  ///< 本层最小值:[/],(/,/,/),[/],(0,100), 本层最小值
   float min = 2;

  ///< 本层最大值:[/],(/,/,/),[/],(0,100), 本层最大值
   float max = 3; 
}

/**
 * @brief  Grid Title.
 * @detail 栅格标题
 */
message Title {
  ///< 标题:[/],(/,/,/),[/],(0,3), 标题
   int32 title_name = 1;   

  ///< 栅格层:[/],(/,/,/),[/],(0,3), 栅格层
  repeated LayerProperty layer = 2;    
}

/**
 * @brief  GridMetaData.
 * @detail 栅格数据
 */
message GridMetaData {
  ///< grid名字：[/],(/,/,/),[/],(/,/),grid名字
   string grid_name = 1; 
  
  ///< grid的各个维度size：[/],(/,/,/),[/],(/,/),grid的各个维度size
  repeated int32 shape = 2;
  
  ///< grid的分辨率：[/],(/,/,/),[/],(/,/),grid的分辨率，和shape维度相同且一一对应
  repeated float resolution = 3;
  
  ///< grid的标题：[/],(/,/,/),[/],(/,/),grid的标题
  repeated Title title = 4;

  ///< 坐标变换原点：[/],(/,/,/),[/],(/,/),坐标变换原点
   BevGeoProto.Pose origin = 5;

  ///< 数据类型：[/],(/,/,/),[/],(/,/),数据类型, int, float...
   BevStdProto.DataType data_type = 9;

  ///< occ数据：[/],(/,/,/),[/],(/,/),occ数据
  repeated int32 data = 10;
}

/**
 * @brief  Grid.
 * @detail Grid data存储方式, 默认按照按层进行存储
 */
message Grid {
    ///< Header：[/],(/,/,/),[/],(1,0),Header
     BevStdProto.Header header = 1;

    ///< Grid主数据：[/],(/,/,/),[/],(1,0),Grid主数据
     GridMetaData info = 2; 

    ///< 延时统计：[/],(/,/,/),[/],(1,0),标识publish输出时间戳
    SeqHeaderProto.SeqHeader seqheader = 3;
}

