// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ins_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ins_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ins_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "wheel_data.pb.h"
#include "seq_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ins_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ins_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ins_5fdata_2eproto;
namespace localization {
class InsData;
struct InsDataDefaultTypeInternal;
extern InsDataDefaultTypeInternal _InsData_default_instance_;
}  // namespace localization
PROTOBUF_NAMESPACE_OPEN
template<> ::localization::InsData* Arena::CreateMaybeMessage<::localization::InsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace localization {

enum GpsStatus : int {
  kNone = 0,
  kSingle = 1,
  kPsrDiffSBAS = 2,
  kDGPS = 3,
  kRtkFloat = 4,
  kRtkInt = 5,
  kInsPos = 6,
  GpsStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GpsStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GpsStatus_IsValid(int value);
constexpr GpsStatus GpsStatus_MIN = kNone;
constexpr GpsStatus GpsStatus_MAX = kInsPos;
constexpr int GpsStatus_ARRAYSIZE = GpsStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsStatus_descriptor();
template<typename T>
inline const std::string& GpsStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpsStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpsStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GpsStatus_descriptor(), enum_t_value);
}
inline bool GpsStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpsStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpsStatus>(
    GpsStatus_descriptor(), name, value);
}
// ===================================================================

class InsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localization.InsData) */ {
 public:
  inline InsData() : InsData(nullptr) {}
  ~InsData() override;
  explicit PROTOBUF_CONSTEXPR InsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsData(const InsData& from);
  InsData(InsData&& from) noexcept
    : InsData() {
    *this = ::std::move(from);
  }

  inline InsData& operator=(const InsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsData& operator=(InsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsData* internal_default_instance() {
    return reinterpret_cast<const InsData*>(
               &_InsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InsData& a, InsData& b) {
    a.Swap(&b);
  }
  inline void Swap(InsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InsData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localization.InsData";
  }
  protected:
  explicit InsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWheelDataFieldNumber = 39,
    kHeaderFieldNumber = 40,
    kSeqHeaderFieldNumber = 41,
    kSecOfWeekFieldNumber = 1,
    kGpsWeekNumberFieldNumber = 2,
    kUtcFieldNumber = 3,
    kPositionTypeFieldNumber = 4,
    kNumsvFieldNumber = 5,
    kTemperatureFieldNumber = 7,
    kLatitudeFieldNumber = 8,
    kLongitudeFieldNumber = 9,
    kAltitudeFieldNumber = 10,
    kNorthVelocityFieldNumber = 11,
    kEastVelocityFieldNumber = 12,
    kGroundVelocityFieldNumber = 13,
    kRollFieldNumber = 14,
    kPitchFieldNumber = 15,
    kHeadingFieldNumber = 16,
    kXAngularVelocityFieldNumber = 17,
    kYAngularVelocityFieldNumber = 18,
    kZAngularVelocityFieldNumber = 19,
    kXAccFieldNumber = 20,
    kYAccFieldNumber = 21,
    kZAccFieldNumber = 22,
    kLatitudeStdFieldNumber = 23,
    kLongitudeStdFieldNumber = 24,
    kAltitudeStdFieldNumber = 25,
    kNorthVelocityStdFieldNumber = 26,
    kEastVelocityStdFieldNumber = 27,
    kGroundVelocityStdFieldNumber = 28,
    kRollStdFieldNumber = 29,
    kPitchStdFieldNumber = 30,
    kHeadingStdFieldNumber = 31,
    kAtb0FieldNumber = 32,
    kAtb1FieldNumber = 33,
    kAtb2FieldNumber = 34,
    kQXFieldNumber = 35,
    kQYFieldNumber = 36,
    kQZFieldNumber = 37,
    kQWFieldNumber = 38,
    kXAngularVelocityBiasFieldNumber = 42,
    kYAngularVelocityBiasFieldNumber = 43,
    kZAngularVelocityBiasFieldNumber = 44,
    kXAccBiasFieldNumber = 45,
    kYAccBiasFieldNumber = 46,
    kZAccBiasFieldNumber = 47,
    kInsStatusFieldNumber = 6,
  };
  // .localization.WheelData wheel_data = 39;
  bool has_wheel_data() const;
  private:
  bool _internal_has_wheel_data() const;
  public:
  void clear_wheel_data();
  const ::localization::WheelData& wheel_data() const;
  PROTOBUF_NODISCARD ::localization::WheelData* release_wheel_data();
  ::localization::WheelData* mutable_wheel_data();
  void set_allocated_wheel_data(::localization::WheelData* wheel_data);
  private:
  const ::localization::WheelData& _internal_wheel_data() const;
  ::localization::WheelData* _internal_mutable_wheel_data();
  public:
  void unsafe_arena_set_allocated_wheel_data(
      ::localization::WheelData* wheel_data);
  ::localization::WheelData* unsafe_arena_release_wheel_data();

  // .localization.Header header = 40;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::localization::Header& header() const;
  PROTOBUF_NODISCARD ::localization::Header* release_header();
  ::localization::Header* mutable_header();
  void set_allocated_header(::localization::Header* header);
  private:
  const ::localization::Header& _internal_header() const;
  ::localization::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::localization::Header* header);
  ::localization::Header* unsafe_arena_release_header();

  // .SeqHeaderProto.SeqHeader seq_header = 41;
  bool has_seq_header() const;
  private:
  bool _internal_has_seq_header() const;
  public:
  void clear_seq_header();
  const ::SeqHeaderProto::SeqHeader& seq_header() const;
  PROTOBUF_NODISCARD ::SeqHeaderProto::SeqHeader* release_seq_header();
  ::SeqHeaderProto::SeqHeader* mutable_seq_header();
  void set_allocated_seq_header(::SeqHeaderProto::SeqHeader* seq_header);
  private:
  const ::SeqHeaderProto::SeqHeader& _internal_seq_header() const;
  ::SeqHeaderProto::SeqHeader* _internal_mutable_seq_header();
  public:
  void unsafe_arena_set_allocated_seq_header(
      ::SeqHeaderProto::SeqHeader* seq_header);
  ::SeqHeaderProto::SeqHeader* unsafe_arena_release_seq_header();

  // double sec_of_week = 1;
  void clear_sec_of_week();
  double sec_of_week() const;
  void set_sec_of_week(double value);
  private:
  double _internal_sec_of_week() const;
  void _internal_set_sec_of_week(double value);
  public:

  // double gps_week_number = 2;
  void clear_gps_week_number();
  double gps_week_number() const;
  void set_gps_week_number(double value);
  private:
  double _internal_gps_week_number() const;
  void _internal_set_gps_week_number(double value);
  public:

  // double utc = 3;
  void clear_utc();
  double utc() const;
  void set_utc(double value);
  private:
  double _internal_utc() const;
  void _internal_set_utc(double value);
  public:

  // .localization.GpsStatus position_type = 4;
  void clear_position_type();
  ::localization::GpsStatus position_type() const;
  void set_position_type(::localization::GpsStatus value);
  private:
  ::localization::GpsStatus _internal_position_type() const;
  void _internal_set_position_type(::localization::GpsStatus value);
  public:

  // uint32 numsv = 5;
  void clear_numsv();
  uint32_t numsv() const;
  void set_numsv(uint32_t value);
  private:
  uint32_t _internal_numsv() const;
  void _internal_set_numsv(uint32_t value);
  public:

  // double temperature = 7;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // double latitude = 8;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 9;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 10;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // double north_velocity = 11;
  void clear_north_velocity();
  double north_velocity() const;
  void set_north_velocity(double value);
  private:
  double _internal_north_velocity() const;
  void _internal_set_north_velocity(double value);
  public:

  // double east_velocity = 12;
  void clear_east_velocity();
  double east_velocity() const;
  void set_east_velocity(double value);
  private:
  double _internal_east_velocity() const;
  void _internal_set_east_velocity(double value);
  public:

  // double ground_velocity = 13;
  void clear_ground_velocity();
  double ground_velocity() const;
  void set_ground_velocity(double value);
  private:
  double _internal_ground_velocity() const;
  void _internal_set_ground_velocity(double value);
  public:

  // double roll = 14;
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double pitch = 15;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double heading = 16;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // double x_angular_velocity = 17;
  void clear_x_angular_velocity();
  double x_angular_velocity() const;
  void set_x_angular_velocity(double value);
  private:
  double _internal_x_angular_velocity() const;
  void _internal_set_x_angular_velocity(double value);
  public:

  // double y_angular_velocity = 18;
  void clear_y_angular_velocity();
  double y_angular_velocity() const;
  void set_y_angular_velocity(double value);
  private:
  double _internal_y_angular_velocity() const;
  void _internal_set_y_angular_velocity(double value);
  public:

  // double z_angular_velocity = 19;
  void clear_z_angular_velocity();
  double z_angular_velocity() const;
  void set_z_angular_velocity(double value);
  private:
  double _internal_z_angular_velocity() const;
  void _internal_set_z_angular_velocity(double value);
  public:

  // double x_acc = 20;
  void clear_x_acc();
  double x_acc() const;
  void set_x_acc(double value);
  private:
  double _internal_x_acc() const;
  void _internal_set_x_acc(double value);
  public:

  // double y_acc = 21;
  void clear_y_acc();
  double y_acc() const;
  void set_y_acc(double value);
  private:
  double _internal_y_acc() const;
  void _internal_set_y_acc(double value);
  public:

  // double z_acc = 22;
  void clear_z_acc();
  double z_acc() const;
  void set_z_acc(double value);
  private:
  double _internal_z_acc() const;
  void _internal_set_z_acc(double value);
  public:

  // double latitude_std = 23;
  void clear_latitude_std();
  double latitude_std() const;
  void set_latitude_std(double value);
  private:
  double _internal_latitude_std() const;
  void _internal_set_latitude_std(double value);
  public:

  // double longitude_std = 24;
  void clear_longitude_std();
  double longitude_std() const;
  void set_longitude_std(double value);
  private:
  double _internal_longitude_std() const;
  void _internal_set_longitude_std(double value);
  public:

  // double altitude_std = 25;
  void clear_altitude_std();
  double altitude_std() const;
  void set_altitude_std(double value);
  private:
  double _internal_altitude_std() const;
  void _internal_set_altitude_std(double value);
  public:

  // double north_velocity_std = 26;
  void clear_north_velocity_std();
  double north_velocity_std() const;
  void set_north_velocity_std(double value);
  private:
  double _internal_north_velocity_std() const;
  void _internal_set_north_velocity_std(double value);
  public:

  // double east_velocity_std = 27;
  void clear_east_velocity_std();
  double east_velocity_std() const;
  void set_east_velocity_std(double value);
  private:
  double _internal_east_velocity_std() const;
  void _internal_set_east_velocity_std(double value);
  public:

  // double ground_velocity_std = 28;
  void clear_ground_velocity_std();
  double ground_velocity_std() const;
  void set_ground_velocity_std(double value);
  private:
  double _internal_ground_velocity_std() const;
  void _internal_set_ground_velocity_std(double value);
  public:

  // double roll_std = 29;
  void clear_roll_std();
  double roll_std() const;
  void set_roll_std(double value);
  private:
  double _internal_roll_std() const;
  void _internal_set_roll_std(double value);
  public:

  // double pitch_std = 30;
  void clear_pitch_std();
  double pitch_std() const;
  void set_pitch_std(double value);
  private:
  double _internal_pitch_std() const;
  void _internal_set_pitch_std(double value);
  public:

  // double heading_std = 31;
  void clear_heading_std();
  double heading_std() const;
  void set_heading_std(double value);
  private:
  double _internal_heading_std() const;
  void _internal_set_heading_std(double value);
  public:

  // double atb_0 = 32;
  void clear_atb_0();
  double atb_0() const;
  void set_atb_0(double value);
  private:
  double _internal_atb_0() const;
  void _internal_set_atb_0(double value);
  public:

  // double atb_1 = 33;
  void clear_atb_1();
  double atb_1() const;
  void set_atb_1(double value);
  private:
  double _internal_atb_1() const;
  void _internal_set_atb_1(double value);
  public:

  // double atb_2 = 34;
  void clear_atb_2();
  double atb_2() const;
  void set_atb_2(double value);
  private:
  double _internal_atb_2() const;
  void _internal_set_atb_2(double value);
  public:

  // double q_x = 35;
  void clear_q_x();
  double q_x() const;
  void set_q_x(double value);
  private:
  double _internal_q_x() const;
  void _internal_set_q_x(double value);
  public:

  // double q_y = 36;
  void clear_q_y();
  double q_y() const;
  void set_q_y(double value);
  private:
  double _internal_q_y() const;
  void _internal_set_q_y(double value);
  public:

  // double q_z = 37;
  void clear_q_z();
  double q_z() const;
  void set_q_z(double value);
  private:
  double _internal_q_z() const;
  void _internal_set_q_z(double value);
  public:

  // double q_w = 38;
  void clear_q_w();
  double q_w() const;
  void set_q_w(double value);
  private:
  double _internal_q_w() const;
  void _internal_set_q_w(double value);
  public:

  // double x_angular_velocity_bias = 42;
  void clear_x_angular_velocity_bias();
  double x_angular_velocity_bias() const;
  void set_x_angular_velocity_bias(double value);
  private:
  double _internal_x_angular_velocity_bias() const;
  void _internal_set_x_angular_velocity_bias(double value);
  public:

  // double y_angular_velocity_bias = 43;
  void clear_y_angular_velocity_bias();
  double y_angular_velocity_bias() const;
  void set_y_angular_velocity_bias(double value);
  private:
  double _internal_y_angular_velocity_bias() const;
  void _internal_set_y_angular_velocity_bias(double value);
  public:

  // double z_angular_velocity_bias = 44;
  void clear_z_angular_velocity_bias();
  double z_angular_velocity_bias() const;
  void set_z_angular_velocity_bias(double value);
  private:
  double _internal_z_angular_velocity_bias() const;
  void _internal_set_z_angular_velocity_bias(double value);
  public:

  // double x_acc_bias = 45;
  void clear_x_acc_bias();
  double x_acc_bias() const;
  void set_x_acc_bias(double value);
  private:
  double _internal_x_acc_bias() const;
  void _internal_set_x_acc_bias(double value);
  public:

  // double y_acc_bias = 46;
  void clear_y_acc_bias();
  double y_acc_bias() const;
  void set_y_acc_bias(double value);
  private:
  double _internal_y_acc_bias() const;
  void _internal_set_y_acc_bias(double value);
  public:

  // double z_acc_bias = 47;
  void clear_z_acc_bias();
  double z_acc_bias() const;
  void set_z_acc_bias(double value);
  private:
  double _internal_z_acc_bias() const;
  void _internal_set_z_acc_bias(double value);
  public:

  // uint32 ins_status = 6;
  void clear_ins_status();
  uint32_t ins_status() const;
  void set_ins_status(uint32_t value);
  private:
  uint32_t _internal_ins_status() const;
  void _internal_set_ins_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:localization.InsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::localization::WheelData* wheel_data_;
  ::localization::Header* header_;
  ::SeqHeaderProto::SeqHeader* seq_header_;
  double sec_of_week_;
  double gps_week_number_;
  double utc_;
  int position_type_;
  uint32_t numsv_;
  double temperature_;
  double latitude_;
  double longitude_;
  double altitude_;
  double north_velocity_;
  double east_velocity_;
  double ground_velocity_;
  double roll_;
  double pitch_;
  double heading_;
  double x_angular_velocity_;
  double y_angular_velocity_;
  double z_angular_velocity_;
  double x_acc_;
  double y_acc_;
  double z_acc_;
  double latitude_std_;
  double longitude_std_;
  double altitude_std_;
  double north_velocity_std_;
  double east_velocity_std_;
  double ground_velocity_std_;
  double roll_std_;
  double pitch_std_;
  double heading_std_;
  double atb_0_;
  double atb_1_;
  double atb_2_;
  double q_x_;
  double q_y_;
  double q_z_;
  double q_w_;
  double x_angular_velocity_bias_;
  double y_angular_velocity_bias_;
  double z_angular_velocity_bias_;
  double x_acc_bias_;
  double y_acc_bias_;
  double z_acc_bias_;
  uint32_t ins_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ins_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InsData

// double sec_of_week = 1;
inline void InsData::clear_sec_of_week() {
  sec_of_week_ = 0;
}
inline double InsData::_internal_sec_of_week() const {
  return sec_of_week_;
}
inline double InsData::sec_of_week() const {
  // @@protoc_insertion_point(field_get:localization.InsData.sec_of_week)
  return _internal_sec_of_week();
}
inline void InsData::_internal_set_sec_of_week(double value) {
  
  sec_of_week_ = value;
}
inline void InsData::set_sec_of_week(double value) {
  _internal_set_sec_of_week(value);
  // @@protoc_insertion_point(field_set:localization.InsData.sec_of_week)
}

// double gps_week_number = 2;
inline void InsData::clear_gps_week_number() {
  gps_week_number_ = 0;
}
inline double InsData::_internal_gps_week_number() const {
  return gps_week_number_;
}
inline double InsData::gps_week_number() const {
  // @@protoc_insertion_point(field_get:localization.InsData.gps_week_number)
  return _internal_gps_week_number();
}
inline void InsData::_internal_set_gps_week_number(double value) {
  
  gps_week_number_ = value;
}
inline void InsData::set_gps_week_number(double value) {
  _internal_set_gps_week_number(value);
  // @@protoc_insertion_point(field_set:localization.InsData.gps_week_number)
}

// double utc = 3;
inline void InsData::clear_utc() {
  utc_ = 0;
}
inline double InsData::_internal_utc() const {
  return utc_;
}
inline double InsData::utc() const {
  // @@protoc_insertion_point(field_get:localization.InsData.utc)
  return _internal_utc();
}
inline void InsData::_internal_set_utc(double value) {
  
  utc_ = value;
}
inline void InsData::set_utc(double value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:localization.InsData.utc)
}

// .localization.GpsStatus position_type = 4;
inline void InsData::clear_position_type() {
  position_type_ = 0;
}
inline ::localization::GpsStatus InsData::_internal_position_type() const {
  return static_cast< ::localization::GpsStatus >(position_type_);
}
inline ::localization::GpsStatus InsData::position_type() const {
  // @@protoc_insertion_point(field_get:localization.InsData.position_type)
  return _internal_position_type();
}
inline void InsData::_internal_set_position_type(::localization::GpsStatus value) {
  
  position_type_ = value;
}
inline void InsData::set_position_type(::localization::GpsStatus value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:localization.InsData.position_type)
}

// uint32 numsv = 5;
inline void InsData::clear_numsv() {
  numsv_ = 0u;
}
inline uint32_t InsData::_internal_numsv() const {
  return numsv_;
}
inline uint32_t InsData::numsv() const {
  // @@protoc_insertion_point(field_get:localization.InsData.numsv)
  return _internal_numsv();
}
inline void InsData::_internal_set_numsv(uint32_t value) {
  
  numsv_ = value;
}
inline void InsData::set_numsv(uint32_t value) {
  _internal_set_numsv(value);
  // @@protoc_insertion_point(field_set:localization.InsData.numsv)
}

// uint32 ins_status = 6;
inline void InsData::clear_ins_status() {
  ins_status_ = 0u;
}
inline uint32_t InsData::_internal_ins_status() const {
  return ins_status_;
}
inline uint32_t InsData::ins_status() const {
  // @@protoc_insertion_point(field_get:localization.InsData.ins_status)
  return _internal_ins_status();
}
inline void InsData::_internal_set_ins_status(uint32_t value) {
  
  ins_status_ = value;
}
inline void InsData::set_ins_status(uint32_t value) {
  _internal_set_ins_status(value);
  // @@protoc_insertion_point(field_set:localization.InsData.ins_status)
}

// double temperature = 7;
inline void InsData::clear_temperature() {
  temperature_ = 0;
}
inline double InsData::_internal_temperature() const {
  return temperature_;
}
inline double InsData::temperature() const {
  // @@protoc_insertion_point(field_get:localization.InsData.temperature)
  return _internal_temperature();
}
inline void InsData::_internal_set_temperature(double value) {
  
  temperature_ = value;
}
inline void InsData::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:localization.InsData.temperature)
}

// double latitude = 8;
inline void InsData::clear_latitude() {
  latitude_ = 0;
}
inline double InsData::_internal_latitude() const {
  return latitude_;
}
inline double InsData::latitude() const {
  // @@protoc_insertion_point(field_get:localization.InsData.latitude)
  return _internal_latitude();
}
inline void InsData::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void InsData::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:localization.InsData.latitude)
}

// double longitude = 9;
inline void InsData::clear_longitude() {
  longitude_ = 0;
}
inline double InsData::_internal_longitude() const {
  return longitude_;
}
inline double InsData::longitude() const {
  // @@protoc_insertion_point(field_get:localization.InsData.longitude)
  return _internal_longitude();
}
inline void InsData::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void InsData::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:localization.InsData.longitude)
}

// double altitude = 10;
inline void InsData::clear_altitude() {
  altitude_ = 0;
}
inline double InsData::_internal_altitude() const {
  return altitude_;
}
inline double InsData::altitude() const {
  // @@protoc_insertion_point(field_get:localization.InsData.altitude)
  return _internal_altitude();
}
inline void InsData::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void InsData::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:localization.InsData.altitude)
}

// double north_velocity = 11;
inline void InsData::clear_north_velocity() {
  north_velocity_ = 0;
}
inline double InsData::_internal_north_velocity() const {
  return north_velocity_;
}
inline double InsData::north_velocity() const {
  // @@protoc_insertion_point(field_get:localization.InsData.north_velocity)
  return _internal_north_velocity();
}
inline void InsData::_internal_set_north_velocity(double value) {
  
  north_velocity_ = value;
}
inline void InsData::set_north_velocity(double value) {
  _internal_set_north_velocity(value);
  // @@protoc_insertion_point(field_set:localization.InsData.north_velocity)
}

// double east_velocity = 12;
inline void InsData::clear_east_velocity() {
  east_velocity_ = 0;
}
inline double InsData::_internal_east_velocity() const {
  return east_velocity_;
}
inline double InsData::east_velocity() const {
  // @@protoc_insertion_point(field_get:localization.InsData.east_velocity)
  return _internal_east_velocity();
}
inline void InsData::_internal_set_east_velocity(double value) {
  
  east_velocity_ = value;
}
inline void InsData::set_east_velocity(double value) {
  _internal_set_east_velocity(value);
  // @@protoc_insertion_point(field_set:localization.InsData.east_velocity)
}

// double ground_velocity = 13;
inline void InsData::clear_ground_velocity() {
  ground_velocity_ = 0;
}
inline double InsData::_internal_ground_velocity() const {
  return ground_velocity_;
}
inline double InsData::ground_velocity() const {
  // @@protoc_insertion_point(field_get:localization.InsData.ground_velocity)
  return _internal_ground_velocity();
}
inline void InsData::_internal_set_ground_velocity(double value) {
  
  ground_velocity_ = value;
}
inline void InsData::set_ground_velocity(double value) {
  _internal_set_ground_velocity(value);
  // @@protoc_insertion_point(field_set:localization.InsData.ground_velocity)
}

// double roll = 14;
inline void InsData::clear_roll() {
  roll_ = 0;
}
inline double InsData::_internal_roll() const {
  return roll_;
}
inline double InsData::roll() const {
  // @@protoc_insertion_point(field_get:localization.InsData.roll)
  return _internal_roll();
}
inline void InsData::_internal_set_roll(double value) {
  
  roll_ = value;
}
inline void InsData::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:localization.InsData.roll)
}

// double pitch = 15;
inline void InsData::clear_pitch() {
  pitch_ = 0;
}
inline double InsData::_internal_pitch() const {
  return pitch_;
}
inline double InsData::pitch() const {
  // @@protoc_insertion_point(field_get:localization.InsData.pitch)
  return _internal_pitch();
}
inline void InsData::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void InsData::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:localization.InsData.pitch)
}

// double heading = 16;
inline void InsData::clear_heading() {
  heading_ = 0;
}
inline double InsData::_internal_heading() const {
  return heading_;
}
inline double InsData::heading() const {
  // @@protoc_insertion_point(field_get:localization.InsData.heading)
  return _internal_heading();
}
inline void InsData::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void InsData::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:localization.InsData.heading)
}

// double x_angular_velocity = 17;
inline void InsData::clear_x_angular_velocity() {
  x_angular_velocity_ = 0;
}
inline double InsData::_internal_x_angular_velocity() const {
  return x_angular_velocity_;
}
inline double InsData::x_angular_velocity() const {
  // @@protoc_insertion_point(field_get:localization.InsData.x_angular_velocity)
  return _internal_x_angular_velocity();
}
inline void InsData::_internal_set_x_angular_velocity(double value) {
  
  x_angular_velocity_ = value;
}
inline void InsData::set_x_angular_velocity(double value) {
  _internal_set_x_angular_velocity(value);
  // @@protoc_insertion_point(field_set:localization.InsData.x_angular_velocity)
}

// double y_angular_velocity = 18;
inline void InsData::clear_y_angular_velocity() {
  y_angular_velocity_ = 0;
}
inline double InsData::_internal_y_angular_velocity() const {
  return y_angular_velocity_;
}
inline double InsData::y_angular_velocity() const {
  // @@protoc_insertion_point(field_get:localization.InsData.y_angular_velocity)
  return _internal_y_angular_velocity();
}
inline void InsData::_internal_set_y_angular_velocity(double value) {
  
  y_angular_velocity_ = value;
}
inline void InsData::set_y_angular_velocity(double value) {
  _internal_set_y_angular_velocity(value);
  // @@protoc_insertion_point(field_set:localization.InsData.y_angular_velocity)
}

// double z_angular_velocity = 19;
inline void InsData::clear_z_angular_velocity() {
  z_angular_velocity_ = 0;
}
inline double InsData::_internal_z_angular_velocity() const {
  return z_angular_velocity_;
}
inline double InsData::z_angular_velocity() const {
  // @@protoc_insertion_point(field_get:localization.InsData.z_angular_velocity)
  return _internal_z_angular_velocity();
}
inline void InsData::_internal_set_z_angular_velocity(double value) {
  
  z_angular_velocity_ = value;
}
inline void InsData::set_z_angular_velocity(double value) {
  _internal_set_z_angular_velocity(value);
  // @@protoc_insertion_point(field_set:localization.InsData.z_angular_velocity)
}

// double x_acc = 20;
inline void InsData::clear_x_acc() {
  x_acc_ = 0;
}
inline double InsData::_internal_x_acc() const {
  return x_acc_;
}
inline double InsData::x_acc() const {
  // @@protoc_insertion_point(field_get:localization.InsData.x_acc)
  return _internal_x_acc();
}
inline void InsData::_internal_set_x_acc(double value) {
  
  x_acc_ = value;
}
inline void InsData::set_x_acc(double value) {
  _internal_set_x_acc(value);
  // @@protoc_insertion_point(field_set:localization.InsData.x_acc)
}

// double y_acc = 21;
inline void InsData::clear_y_acc() {
  y_acc_ = 0;
}
inline double InsData::_internal_y_acc() const {
  return y_acc_;
}
inline double InsData::y_acc() const {
  // @@protoc_insertion_point(field_get:localization.InsData.y_acc)
  return _internal_y_acc();
}
inline void InsData::_internal_set_y_acc(double value) {
  
  y_acc_ = value;
}
inline void InsData::set_y_acc(double value) {
  _internal_set_y_acc(value);
  // @@protoc_insertion_point(field_set:localization.InsData.y_acc)
}

// double z_acc = 22;
inline void InsData::clear_z_acc() {
  z_acc_ = 0;
}
inline double InsData::_internal_z_acc() const {
  return z_acc_;
}
inline double InsData::z_acc() const {
  // @@protoc_insertion_point(field_get:localization.InsData.z_acc)
  return _internal_z_acc();
}
inline void InsData::_internal_set_z_acc(double value) {
  
  z_acc_ = value;
}
inline void InsData::set_z_acc(double value) {
  _internal_set_z_acc(value);
  // @@protoc_insertion_point(field_set:localization.InsData.z_acc)
}

// double latitude_std = 23;
inline void InsData::clear_latitude_std() {
  latitude_std_ = 0;
}
inline double InsData::_internal_latitude_std() const {
  return latitude_std_;
}
inline double InsData::latitude_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.latitude_std)
  return _internal_latitude_std();
}
inline void InsData::_internal_set_latitude_std(double value) {
  
  latitude_std_ = value;
}
inline void InsData::set_latitude_std(double value) {
  _internal_set_latitude_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.latitude_std)
}

// double longitude_std = 24;
inline void InsData::clear_longitude_std() {
  longitude_std_ = 0;
}
inline double InsData::_internal_longitude_std() const {
  return longitude_std_;
}
inline double InsData::longitude_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.longitude_std)
  return _internal_longitude_std();
}
inline void InsData::_internal_set_longitude_std(double value) {
  
  longitude_std_ = value;
}
inline void InsData::set_longitude_std(double value) {
  _internal_set_longitude_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.longitude_std)
}

// double altitude_std = 25;
inline void InsData::clear_altitude_std() {
  altitude_std_ = 0;
}
inline double InsData::_internal_altitude_std() const {
  return altitude_std_;
}
inline double InsData::altitude_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.altitude_std)
  return _internal_altitude_std();
}
inline void InsData::_internal_set_altitude_std(double value) {
  
  altitude_std_ = value;
}
inline void InsData::set_altitude_std(double value) {
  _internal_set_altitude_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.altitude_std)
}

// double north_velocity_std = 26;
inline void InsData::clear_north_velocity_std() {
  north_velocity_std_ = 0;
}
inline double InsData::_internal_north_velocity_std() const {
  return north_velocity_std_;
}
inline double InsData::north_velocity_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.north_velocity_std)
  return _internal_north_velocity_std();
}
inline void InsData::_internal_set_north_velocity_std(double value) {
  
  north_velocity_std_ = value;
}
inline void InsData::set_north_velocity_std(double value) {
  _internal_set_north_velocity_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.north_velocity_std)
}

// double east_velocity_std = 27;
inline void InsData::clear_east_velocity_std() {
  east_velocity_std_ = 0;
}
inline double InsData::_internal_east_velocity_std() const {
  return east_velocity_std_;
}
inline double InsData::east_velocity_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.east_velocity_std)
  return _internal_east_velocity_std();
}
inline void InsData::_internal_set_east_velocity_std(double value) {
  
  east_velocity_std_ = value;
}
inline void InsData::set_east_velocity_std(double value) {
  _internal_set_east_velocity_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.east_velocity_std)
}

// double ground_velocity_std = 28;
inline void InsData::clear_ground_velocity_std() {
  ground_velocity_std_ = 0;
}
inline double InsData::_internal_ground_velocity_std() const {
  return ground_velocity_std_;
}
inline double InsData::ground_velocity_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.ground_velocity_std)
  return _internal_ground_velocity_std();
}
inline void InsData::_internal_set_ground_velocity_std(double value) {
  
  ground_velocity_std_ = value;
}
inline void InsData::set_ground_velocity_std(double value) {
  _internal_set_ground_velocity_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.ground_velocity_std)
}

// double roll_std = 29;
inline void InsData::clear_roll_std() {
  roll_std_ = 0;
}
inline double InsData::_internal_roll_std() const {
  return roll_std_;
}
inline double InsData::roll_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.roll_std)
  return _internal_roll_std();
}
inline void InsData::_internal_set_roll_std(double value) {
  
  roll_std_ = value;
}
inline void InsData::set_roll_std(double value) {
  _internal_set_roll_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.roll_std)
}

// double pitch_std = 30;
inline void InsData::clear_pitch_std() {
  pitch_std_ = 0;
}
inline double InsData::_internal_pitch_std() const {
  return pitch_std_;
}
inline double InsData::pitch_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.pitch_std)
  return _internal_pitch_std();
}
inline void InsData::_internal_set_pitch_std(double value) {
  
  pitch_std_ = value;
}
inline void InsData::set_pitch_std(double value) {
  _internal_set_pitch_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.pitch_std)
}

// double heading_std = 31;
inline void InsData::clear_heading_std() {
  heading_std_ = 0;
}
inline double InsData::_internal_heading_std() const {
  return heading_std_;
}
inline double InsData::heading_std() const {
  // @@protoc_insertion_point(field_get:localization.InsData.heading_std)
  return _internal_heading_std();
}
inline void InsData::_internal_set_heading_std(double value) {
  
  heading_std_ = value;
}
inline void InsData::set_heading_std(double value) {
  _internal_set_heading_std(value);
  // @@protoc_insertion_point(field_set:localization.InsData.heading_std)
}

// double atb_0 = 32;
inline void InsData::clear_atb_0() {
  atb_0_ = 0;
}
inline double InsData::_internal_atb_0() const {
  return atb_0_;
}
inline double InsData::atb_0() const {
  // @@protoc_insertion_point(field_get:localization.InsData.atb_0)
  return _internal_atb_0();
}
inline void InsData::_internal_set_atb_0(double value) {
  
  atb_0_ = value;
}
inline void InsData::set_atb_0(double value) {
  _internal_set_atb_0(value);
  // @@protoc_insertion_point(field_set:localization.InsData.atb_0)
}

// double atb_1 = 33;
inline void InsData::clear_atb_1() {
  atb_1_ = 0;
}
inline double InsData::_internal_atb_1() const {
  return atb_1_;
}
inline double InsData::atb_1() const {
  // @@protoc_insertion_point(field_get:localization.InsData.atb_1)
  return _internal_atb_1();
}
inline void InsData::_internal_set_atb_1(double value) {
  
  atb_1_ = value;
}
inline void InsData::set_atb_1(double value) {
  _internal_set_atb_1(value);
  // @@protoc_insertion_point(field_set:localization.InsData.atb_1)
}

// double atb_2 = 34;
inline void InsData::clear_atb_2() {
  atb_2_ = 0;
}
inline double InsData::_internal_atb_2() const {
  return atb_2_;
}
inline double InsData::atb_2() const {
  // @@protoc_insertion_point(field_get:localization.InsData.atb_2)
  return _internal_atb_2();
}
inline void InsData::_internal_set_atb_2(double value) {
  
  atb_2_ = value;
}
inline void InsData::set_atb_2(double value) {
  _internal_set_atb_2(value);
  // @@protoc_insertion_point(field_set:localization.InsData.atb_2)
}

// double q_x = 35;
inline void InsData::clear_q_x() {
  q_x_ = 0;
}
inline double InsData::_internal_q_x() const {
  return q_x_;
}
inline double InsData::q_x() const {
  // @@protoc_insertion_point(field_get:localization.InsData.q_x)
  return _internal_q_x();
}
inline void InsData::_internal_set_q_x(double value) {
  
  q_x_ = value;
}
inline void InsData::set_q_x(double value) {
  _internal_set_q_x(value);
  // @@protoc_insertion_point(field_set:localization.InsData.q_x)
}

// double q_y = 36;
inline void InsData::clear_q_y() {
  q_y_ = 0;
}
inline double InsData::_internal_q_y() const {
  return q_y_;
}
inline double InsData::q_y() const {
  // @@protoc_insertion_point(field_get:localization.InsData.q_y)
  return _internal_q_y();
}
inline void InsData::_internal_set_q_y(double value) {
  
  q_y_ = value;
}
inline void InsData::set_q_y(double value) {
  _internal_set_q_y(value);
  // @@protoc_insertion_point(field_set:localization.InsData.q_y)
}

// double q_z = 37;
inline void InsData::clear_q_z() {
  q_z_ = 0;
}
inline double InsData::_internal_q_z() const {
  return q_z_;
}
inline double InsData::q_z() const {
  // @@protoc_insertion_point(field_get:localization.InsData.q_z)
  return _internal_q_z();
}
inline void InsData::_internal_set_q_z(double value) {
  
  q_z_ = value;
}
inline void InsData::set_q_z(double value) {
  _internal_set_q_z(value);
  // @@protoc_insertion_point(field_set:localization.InsData.q_z)
}

// double q_w = 38;
inline void InsData::clear_q_w() {
  q_w_ = 0;
}
inline double InsData::_internal_q_w() const {
  return q_w_;
}
inline double InsData::q_w() const {
  // @@protoc_insertion_point(field_get:localization.InsData.q_w)
  return _internal_q_w();
}
inline void InsData::_internal_set_q_w(double value) {
  
  q_w_ = value;
}
inline void InsData::set_q_w(double value) {
  _internal_set_q_w(value);
  // @@protoc_insertion_point(field_set:localization.InsData.q_w)
}

// .localization.WheelData wheel_data = 39;
inline bool InsData::_internal_has_wheel_data() const {
  return this != internal_default_instance() && wheel_data_ != nullptr;
}
inline bool InsData::has_wheel_data() const {
  return _internal_has_wheel_data();
}
inline const ::localization::WheelData& InsData::_internal_wheel_data() const {
  const ::localization::WheelData* p = wheel_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::localization::WheelData&>(
      ::localization::_WheelData_default_instance_);
}
inline const ::localization::WheelData& InsData::wheel_data() const {
  // @@protoc_insertion_point(field_get:localization.InsData.wheel_data)
  return _internal_wheel_data();
}
inline void InsData::unsafe_arena_set_allocated_wheel_data(
    ::localization::WheelData* wheel_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheel_data_);
  }
  wheel_data_ = wheel_data;
  if (wheel_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localization.InsData.wheel_data)
}
inline ::localization::WheelData* InsData::release_wheel_data() {
  
  ::localization::WheelData* temp = wheel_data_;
  wheel_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::localization::WheelData* InsData::unsafe_arena_release_wheel_data() {
  // @@protoc_insertion_point(field_release:localization.InsData.wheel_data)
  
  ::localization::WheelData* temp = wheel_data_;
  wheel_data_ = nullptr;
  return temp;
}
inline ::localization::WheelData* InsData::_internal_mutable_wheel_data() {
  
  if (wheel_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::localization::WheelData>(GetArenaForAllocation());
    wheel_data_ = p;
  }
  return wheel_data_;
}
inline ::localization::WheelData* InsData::mutable_wheel_data() {
  ::localization::WheelData* _msg = _internal_mutable_wheel_data();
  // @@protoc_insertion_point(field_mutable:localization.InsData.wheel_data)
  return _msg;
}
inline void InsData::set_allocated_wheel_data(::localization::WheelData* wheel_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheel_data_);
  }
  if (wheel_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheel_data));
    if (message_arena != submessage_arena) {
      wheel_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheel_data, submessage_arena);
    }
    
  } else {
    
  }
  wheel_data_ = wheel_data;
  // @@protoc_insertion_point(field_set_allocated:localization.InsData.wheel_data)
}

// .localization.Header header = 40;
inline bool InsData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InsData::has_header() const {
  return _internal_has_header();
}
inline const ::localization::Header& InsData::_internal_header() const {
  const ::localization::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::localization::Header&>(
      ::localization::_Header_default_instance_);
}
inline const ::localization::Header& InsData::header() const {
  // @@protoc_insertion_point(field_get:localization.InsData.header)
  return _internal_header();
}
inline void InsData::unsafe_arena_set_allocated_header(
    ::localization::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localization.InsData.header)
}
inline ::localization::Header* InsData::release_header() {
  
  ::localization::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::localization::Header* InsData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:localization.InsData.header)
  
  ::localization::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::localization::Header* InsData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::localization::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::localization::Header* InsData::mutable_header() {
  ::localization::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:localization.InsData.header)
  return _msg;
}
inline void InsData::set_allocated_header(::localization::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:localization.InsData.header)
}

// .SeqHeaderProto.SeqHeader seq_header = 41;
inline bool InsData::_internal_has_seq_header() const {
  return this != internal_default_instance() && seq_header_ != nullptr;
}
inline bool InsData::has_seq_header() const {
  return _internal_has_seq_header();
}
inline const ::SeqHeaderProto::SeqHeader& InsData::_internal_seq_header() const {
  const ::SeqHeaderProto::SeqHeader* p = seq_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::SeqHeaderProto::SeqHeader&>(
      ::SeqHeaderProto::_SeqHeader_default_instance_);
}
inline const ::SeqHeaderProto::SeqHeader& InsData::seq_header() const {
  // @@protoc_insertion_point(field_get:localization.InsData.seq_header)
  return _internal_seq_header();
}
inline void InsData::unsafe_arena_set_allocated_seq_header(
    ::SeqHeaderProto::SeqHeader* seq_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seq_header_);
  }
  seq_header_ = seq_header;
  if (seq_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localization.InsData.seq_header)
}
inline ::SeqHeaderProto::SeqHeader* InsData::release_seq_header() {
  
  ::SeqHeaderProto::SeqHeader* temp = seq_header_;
  seq_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SeqHeaderProto::SeqHeader* InsData::unsafe_arena_release_seq_header() {
  // @@protoc_insertion_point(field_release:localization.InsData.seq_header)
  
  ::SeqHeaderProto::SeqHeader* temp = seq_header_;
  seq_header_ = nullptr;
  return temp;
}
inline ::SeqHeaderProto::SeqHeader* InsData::_internal_mutable_seq_header() {
  
  if (seq_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::SeqHeaderProto::SeqHeader>(GetArenaForAllocation());
    seq_header_ = p;
  }
  return seq_header_;
}
inline ::SeqHeaderProto::SeqHeader* InsData::mutable_seq_header() {
  ::SeqHeaderProto::SeqHeader* _msg = _internal_mutable_seq_header();
  // @@protoc_insertion_point(field_mutable:localization.InsData.seq_header)
  return _msg;
}
inline void InsData::set_allocated_seq_header(::SeqHeaderProto::SeqHeader* seq_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(seq_header_);
  }
  if (seq_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seq_header));
    if (message_arena != submessage_arena) {
      seq_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seq_header, submessage_arena);
    }
    
  } else {
    
  }
  seq_header_ = seq_header;
  // @@protoc_insertion_point(field_set_allocated:localization.InsData.seq_header)
}

// double x_angular_velocity_bias = 42;
inline void InsData::clear_x_angular_velocity_bias() {
  x_angular_velocity_bias_ = 0;
}
inline double InsData::_internal_x_angular_velocity_bias() const {
  return x_angular_velocity_bias_;
}
inline double InsData::x_angular_velocity_bias() const {
  // @@protoc_insertion_point(field_get:localization.InsData.x_angular_velocity_bias)
  return _internal_x_angular_velocity_bias();
}
inline void InsData::_internal_set_x_angular_velocity_bias(double value) {
  
  x_angular_velocity_bias_ = value;
}
inline void InsData::set_x_angular_velocity_bias(double value) {
  _internal_set_x_angular_velocity_bias(value);
  // @@protoc_insertion_point(field_set:localization.InsData.x_angular_velocity_bias)
}

// double y_angular_velocity_bias = 43;
inline void InsData::clear_y_angular_velocity_bias() {
  y_angular_velocity_bias_ = 0;
}
inline double InsData::_internal_y_angular_velocity_bias() const {
  return y_angular_velocity_bias_;
}
inline double InsData::y_angular_velocity_bias() const {
  // @@protoc_insertion_point(field_get:localization.InsData.y_angular_velocity_bias)
  return _internal_y_angular_velocity_bias();
}
inline void InsData::_internal_set_y_angular_velocity_bias(double value) {
  
  y_angular_velocity_bias_ = value;
}
inline void InsData::set_y_angular_velocity_bias(double value) {
  _internal_set_y_angular_velocity_bias(value);
  // @@protoc_insertion_point(field_set:localization.InsData.y_angular_velocity_bias)
}

// double z_angular_velocity_bias = 44;
inline void InsData::clear_z_angular_velocity_bias() {
  z_angular_velocity_bias_ = 0;
}
inline double InsData::_internal_z_angular_velocity_bias() const {
  return z_angular_velocity_bias_;
}
inline double InsData::z_angular_velocity_bias() const {
  // @@protoc_insertion_point(field_get:localization.InsData.z_angular_velocity_bias)
  return _internal_z_angular_velocity_bias();
}
inline void InsData::_internal_set_z_angular_velocity_bias(double value) {
  
  z_angular_velocity_bias_ = value;
}
inline void InsData::set_z_angular_velocity_bias(double value) {
  _internal_set_z_angular_velocity_bias(value);
  // @@protoc_insertion_point(field_set:localization.InsData.z_angular_velocity_bias)
}

// double x_acc_bias = 45;
inline void InsData::clear_x_acc_bias() {
  x_acc_bias_ = 0;
}
inline double InsData::_internal_x_acc_bias() const {
  return x_acc_bias_;
}
inline double InsData::x_acc_bias() const {
  // @@protoc_insertion_point(field_get:localization.InsData.x_acc_bias)
  return _internal_x_acc_bias();
}
inline void InsData::_internal_set_x_acc_bias(double value) {
  
  x_acc_bias_ = value;
}
inline void InsData::set_x_acc_bias(double value) {
  _internal_set_x_acc_bias(value);
  // @@protoc_insertion_point(field_set:localization.InsData.x_acc_bias)
}

// double y_acc_bias = 46;
inline void InsData::clear_y_acc_bias() {
  y_acc_bias_ = 0;
}
inline double InsData::_internal_y_acc_bias() const {
  return y_acc_bias_;
}
inline double InsData::y_acc_bias() const {
  // @@protoc_insertion_point(field_get:localization.InsData.y_acc_bias)
  return _internal_y_acc_bias();
}
inline void InsData::_internal_set_y_acc_bias(double value) {
  
  y_acc_bias_ = value;
}
inline void InsData::set_y_acc_bias(double value) {
  _internal_set_y_acc_bias(value);
  // @@protoc_insertion_point(field_set:localization.InsData.y_acc_bias)
}

// double z_acc_bias = 47;
inline void InsData::clear_z_acc_bias() {
  z_acc_bias_ = 0;
}
inline double InsData::_internal_z_acc_bias() const {
  return z_acc_bias_;
}
inline double InsData::z_acc_bias() const {
  // @@protoc_insertion_point(field_get:localization.InsData.z_acc_bias)
  return _internal_z_acc_bias();
}
inline void InsData::_internal_set_z_acc_bias(double value) {
  
  z_acc_bias_ = value;
}
inline void InsData::set_z_acc_bias(double value) {
  _internal_set_z_acc_bias(value);
  // @@protoc_insertion_point(field_set:localization.InsData.z_acc_bias)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::localization::GpsStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::localization::GpsStatus>() {
  return ::localization::GpsStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ins_5fdata_2eproto
