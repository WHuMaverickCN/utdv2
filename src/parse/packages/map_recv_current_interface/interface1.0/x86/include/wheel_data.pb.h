// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wheel_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wheel_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wheel_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wheel_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wheel_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wheel_5fdata_2eproto;
namespace localization {
class WheelData;
struct WheelDataDefaultTypeInternal;
extern WheelDataDefaultTypeInternal _WheelData_default_instance_;
}  // namespace localization
PROTOBUF_NAMESPACE_OPEN
template<> ::localization::WheelData* Arena::CreateMaybeMessage<::localization::WheelData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace localization {

// ===================================================================

class WheelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localization.WheelData) */ {
 public:
  inline WheelData() : WheelData(nullptr) {}
  ~WheelData() override;
  explicit PROTOBUF_CONSTEXPR WheelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WheelData(const WheelData& from);
  WheelData(WheelData&& from) noexcept
    : WheelData() {
    *this = ::std::move(from);
  }

  inline WheelData& operator=(const WheelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WheelData& operator=(WheelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WheelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WheelData* internal_default_instance() {
    return reinterpret_cast<const WheelData*>(
               &_WheelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WheelData& a, WheelData& b) {
    a.Swap(&b);
  }
  inline void Swap(WheelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WheelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WheelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WheelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WheelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WheelData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WheelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localization.WheelData";
  }
  protected:
  explicit WheelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFlWheelVelFieldNumber = 2,
    kFrWheelVelFieldNumber = 3,
    kRlWheelVelFieldNumber = 4,
    kRrWheelVelFieldNumber = 5,
    kLWheelFactorFieldNumber = 6,
    kRWheelFactorFieldNumber = 7,
  };
  // .localization.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::localization::Header& header() const;
  PROTOBUF_NODISCARD ::localization::Header* release_header();
  ::localization::Header* mutable_header();
  void set_allocated_header(::localization::Header* header);
  private:
  const ::localization::Header& _internal_header() const;
  ::localization::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::localization::Header* header);
  ::localization::Header* unsafe_arena_release_header();

  // double fl_wheel_vel = 2;
  void clear_fl_wheel_vel();
  double fl_wheel_vel() const;
  void set_fl_wheel_vel(double value);
  private:
  double _internal_fl_wheel_vel() const;
  void _internal_set_fl_wheel_vel(double value);
  public:

  // double fr_wheel_vel = 3;
  void clear_fr_wheel_vel();
  double fr_wheel_vel() const;
  void set_fr_wheel_vel(double value);
  private:
  double _internal_fr_wheel_vel() const;
  void _internal_set_fr_wheel_vel(double value);
  public:

  // double rl_wheel_vel = 4;
  void clear_rl_wheel_vel();
  double rl_wheel_vel() const;
  void set_rl_wheel_vel(double value);
  private:
  double _internal_rl_wheel_vel() const;
  void _internal_set_rl_wheel_vel(double value);
  public:

  // double rr_wheel_vel = 5;
  void clear_rr_wheel_vel();
  double rr_wheel_vel() const;
  void set_rr_wheel_vel(double value);
  private:
  double _internal_rr_wheel_vel() const;
  void _internal_set_rr_wheel_vel(double value);
  public:

  // double l_wheel_factor = 6;
  void clear_l_wheel_factor();
  double l_wheel_factor() const;
  void set_l_wheel_factor(double value);
  private:
  double _internal_l_wheel_factor() const;
  void _internal_set_l_wheel_factor(double value);
  public:

  // double r_wheel_factor = 7;
  void clear_r_wheel_factor();
  double r_wheel_factor() const;
  void set_r_wheel_factor(double value);
  private:
  double _internal_r_wheel_factor() const;
  void _internal_set_r_wheel_factor(double value);
  public:

  // @@protoc_insertion_point(class_scope:localization.WheelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::localization::Header* header_;
  double fl_wheel_vel_;
  double fr_wheel_vel_;
  double rl_wheel_vel_;
  double rr_wheel_vel_;
  double l_wheel_factor_;
  double r_wheel_factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wheel_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WheelData

// .localization.Header header = 1;
inline bool WheelData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool WheelData::has_header() const {
  return _internal_has_header();
}
inline const ::localization::Header& WheelData::_internal_header() const {
  const ::localization::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::localization::Header&>(
      ::localization::_Header_default_instance_);
}
inline const ::localization::Header& WheelData::header() const {
  // @@protoc_insertion_point(field_get:localization.WheelData.header)
  return _internal_header();
}
inline void WheelData::unsafe_arena_set_allocated_header(
    ::localization::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localization.WheelData.header)
}
inline ::localization::Header* WheelData::release_header() {
  
  ::localization::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::localization::Header* WheelData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:localization.WheelData.header)
  
  ::localization::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::localization::Header* WheelData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::localization::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::localization::Header* WheelData::mutable_header() {
  ::localization::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:localization.WheelData.header)
  return _msg;
}
inline void WheelData::set_allocated_header(::localization::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:localization.WheelData.header)
}

// double fl_wheel_vel = 2;
inline void WheelData::clear_fl_wheel_vel() {
  fl_wheel_vel_ = 0;
}
inline double WheelData::_internal_fl_wheel_vel() const {
  return fl_wheel_vel_;
}
inline double WheelData::fl_wheel_vel() const {
  // @@protoc_insertion_point(field_get:localization.WheelData.fl_wheel_vel)
  return _internal_fl_wheel_vel();
}
inline void WheelData::_internal_set_fl_wheel_vel(double value) {
  
  fl_wheel_vel_ = value;
}
inline void WheelData::set_fl_wheel_vel(double value) {
  _internal_set_fl_wheel_vel(value);
  // @@protoc_insertion_point(field_set:localization.WheelData.fl_wheel_vel)
}

// double fr_wheel_vel = 3;
inline void WheelData::clear_fr_wheel_vel() {
  fr_wheel_vel_ = 0;
}
inline double WheelData::_internal_fr_wheel_vel() const {
  return fr_wheel_vel_;
}
inline double WheelData::fr_wheel_vel() const {
  // @@protoc_insertion_point(field_get:localization.WheelData.fr_wheel_vel)
  return _internal_fr_wheel_vel();
}
inline void WheelData::_internal_set_fr_wheel_vel(double value) {
  
  fr_wheel_vel_ = value;
}
inline void WheelData::set_fr_wheel_vel(double value) {
  _internal_set_fr_wheel_vel(value);
  // @@protoc_insertion_point(field_set:localization.WheelData.fr_wheel_vel)
}

// double rl_wheel_vel = 4;
inline void WheelData::clear_rl_wheel_vel() {
  rl_wheel_vel_ = 0;
}
inline double WheelData::_internal_rl_wheel_vel() const {
  return rl_wheel_vel_;
}
inline double WheelData::rl_wheel_vel() const {
  // @@protoc_insertion_point(field_get:localization.WheelData.rl_wheel_vel)
  return _internal_rl_wheel_vel();
}
inline void WheelData::_internal_set_rl_wheel_vel(double value) {
  
  rl_wheel_vel_ = value;
}
inline void WheelData::set_rl_wheel_vel(double value) {
  _internal_set_rl_wheel_vel(value);
  // @@protoc_insertion_point(field_set:localization.WheelData.rl_wheel_vel)
}

// double rr_wheel_vel = 5;
inline void WheelData::clear_rr_wheel_vel() {
  rr_wheel_vel_ = 0;
}
inline double WheelData::_internal_rr_wheel_vel() const {
  return rr_wheel_vel_;
}
inline double WheelData::rr_wheel_vel() const {
  // @@protoc_insertion_point(field_get:localization.WheelData.rr_wheel_vel)
  return _internal_rr_wheel_vel();
}
inline void WheelData::_internal_set_rr_wheel_vel(double value) {
  
  rr_wheel_vel_ = value;
}
inline void WheelData::set_rr_wheel_vel(double value) {
  _internal_set_rr_wheel_vel(value);
  // @@protoc_insertion_point(field_set:localization.WheelData.rr_wheel_vel)
}

// double l_wheel_factor = 6;
inline void WheelData::clear_l_wheel_factor() {
  l_wheel_factor_ = 0;
}
inline double WheelData::_internal_l_wheel_factor() const {
  return l_wheel_factor_;
}
inline double WheelData::l_wheel_factor() const {
  // @@protoc_insertion_point(field_get:localization.WheelData.l_wheel_factor)
  return _internal_l_wheel_factor();
}
inline void WheelData::_internal_set_l_wheel_factor(double value) {
  
  l_wheel_factor_ = value;
}
inline void WheelData::set_l_wheel_factor(double value) {
  _internal_set_l_wheel_factor(value);
  // @@protoc_insertion_point(field_set:localization.WheelData.l_wheel_factor)
}

// double r_wheel_factor = 7;
inline void WheelData::clear_r_wheel_factor() {
  r_wheel_factor_ = 0;
}
inline double WheelData::_internal_r_wheel_factor() const {
  return r_wheel_factor_;
}
inline double WheelData::r_wheel_factor() const {
  // @@protoc_insertion_point(field_get:localization.WheelData.r_wheel_factor)
  return _internal_r_wheel_factor();
}
inline void WheelData::_internal_set_r_wheel_factor(double value) {
  
  r_wheel_factor_ = value;
}
inline void WheelData::set_r_wheel_factor(double value) {
  _internal_set_r_wheel_factor(value);
  // @@protoc_insertion_point(field_set:localization.WheelData.r_wheel_factor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wheel_5fdata_2eproto
