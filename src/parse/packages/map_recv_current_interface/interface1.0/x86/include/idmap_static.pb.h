// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idmap_static.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_idmap_5fstatic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_idmap_5fstatic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "idmap_common.pb.h"
#include "idmap_parking.pb.h"
#include "seq_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_idmap_5fstatic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_idmap_5fstatic_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_idmap_5fstatic_2eproto;
namespace idmap {
class GroundMarking;
struct GroundMarkingDefaultTypeInternal;
extern GroundMarkingDefaultTypeInternal _GroundMarking_default_instance_;
class Lane;
struct LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class MapTrafficLight;
struct MapTrafficLightDefaultTypeInternal;
extern MapTrafficLightDefaultTypeInternal _MapTrafficLight_default_instance_;
class MapTrafficSign;
struct MapTrafficSignDefaultTypeInternal;
extern MapTrafficSignDefaultTypeInternal _MapTrafficSign_default_instance_;
class RoadBoundary;
struct RoadBoundaryDefaultTypeInternal;
extern RoadBoundaryDefaultTypeInternal _RoadBoundary_default_instance_;
class StaticIDMapInfo;
struct StaticIDMapInfoDefaultTypeInternal;
extern StaticIDMapInfoDefaultTypeInternal _StaticIDMapInfo_default_instance_;
class Toll;
struct TollDefaultTypeInternal;
extern TollDefaultTypeInternal _Toll_default_instance_;
}  // namespace idmap
PROTOBUF_NAMESPACE_OPEN
template<> ::idmap::GroundMarking* Arena::CreateMaybeMessage<::idmap::GroundMarking>(Arena*);
template<> ::idmap::Lane* Arena::CreateMaybeMessage<::idmap::Lane>(Arena*);
template<> ::idmap::Line* Arena::CreateMaybeMessage<::idmap::Line>(Arena*);
template<> ::idmap::MapTrafficLight* Arena::CreateMaybeMessage<::idmap::MapTrafficLight>(Arena*);
template<> ::idmap::MapTrafficSign* Arena::CreateMaybeMessage<::idmap::MapTrafficSign>(Arena*);
template<> ::idmap::RoadBoundary* Arena::CreateMaybeMessage<::idmap::RoadBoundary>(Arena*);
template<> ::idmap::StaticIDMapInfo* Arena::CreateMaybeMessage<::idmap::StaticIDMapInfo>(Arena*);
template<> ::idmap::Toll* Arena::CreateMaybeMessage<::idmap::Toll>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idmap {

// ===================================================================

class StaticIDMapInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idmap.StaticIDMapInfo) */ {
 public:
  inline StaticIDMapInfo() : StaticIDMapInfo(nullptr) {}
  ~StaticIDMapInfo() override;
  explicit PROTOBUF_CONSTEXPR StaticIDMapInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StaticIDMapInfo(const StaticIDMapInfo& from);
  StaticIDMapInfo(StaticIDMapInfo&& from) noexcept
    : StaticIDMapInfo() {
    *this = ::std::move(from);
  }

  inline StaticIDMapInfo& operator=(const StaticIDMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticIDMapInfo& operator=(StaticIDMapInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StaticIDMapInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StaticIDMapInfo* internal_default_instance() {
    return reinterpret_cast<const StaticIDMapInfo*>(
               &_StaticIDMapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StaticIDMapInfo& a, StaticIDMapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticIDMapInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StaticIDMapInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StaticIDMapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StaticIDMapInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StaticIDMapInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StaticIDMapInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticIDMapInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idmap.StaticIDMapInfo";
  }
  protected:
  explicit StaticIDMapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanesFieldNumber = 4,
    kLinesFieldNumber = 5,
    kBoundariesFieldNumber = 6,
    kGroundMarkingsFieldNumber = 7,
    kTrafficLightFieldNumber = 8,
    kTrafficInfoFieldNumber = 9,
    kAnchorPosFieldNumber = 1,
    kIdmapStatusFieldNumber = 3,
    kParkingInfoFieldNumber = 10,
    kMapSeqMsgFieldNumber = 12,
    kCircleRadiusFieldNumber = 2,
    kDataChangeCountdownFieldNumber = 11,
  };
  // repeated .idmap.Lane lanes = 4;
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;
  public:
  void clear_lanes();
  ::idmap::Lane* mutable_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Lane >*
      mutable_lanes();
  private:
  const ::idmap::Lane& _internal_lanes(int index) const;
  ::idmap::Lane* _internal_add_lanes();
  public:
  const ::idmap::Lane& lanes(int index) const;
  ::idmap::Lane* add_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Lane >&
      lanes() const;

  // repeated .idmap.Line lines = 5;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::idmap::Line* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Line >*
      mutable_lines();
  private:
  const ::idmap::Line& _internal_lines(int index) const;
  ::idmap::Line* _internal_add_lines();
  public:
  const ::idmap::Line& lines(int index) const;
  ::idmap::Line* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Line >&
      lines() const;

  // repeated .idmap.RoadBoundary boundaries = 6;
  int boundaries_size() const;
  private:
  int _internal_boundaries_size() const;
  public:
  void clear_boundaries();
  ::idmap::RoadBoundary* mutable_boundaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::RoadBoundary >*
      mutable_boundaries();
  private:
  const ::idmap::RoadBoundary& _internal_boundaries(int index) const;
  ::idmap::RoadBoundary* _internal_add_boundaries();
  public:
  const ::idmap::RoadBoundary& boundaries(int index) const;
  ::idmap::RoadBoundary* add_boundaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::RoadBoundary >&
      boundaries() const;

  // repeated .idmap.GroundMarking ground_markings = 7;
  int ground_markings_size() const;
  private:
  int _internal_ground_markings_size() const;
  public:
  void clear_ground_markings();
  ::idmap::GroundMarking* mutable_ground_markings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::GroundMarking >*
      mutable_ground_markings();
  private:
  const ::idmap::GroundMarking& _internal_ground_markings(int index) const;
  ::idmap::GroundMarking* _internal_add_ground_markings();
  public:
  const ::idmap::GroundMarking& ground_markings(int index) const;
  ::idmap::GroundMarking* add_ground_markings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::GroundMarking >&
      ground_markings() const;

  // repeated .idmap.MapTrafficLight traffic_light = 8;
  int traffic_light_size() const;
  private:
  int _internal_traffic_light_size() const;
  public:
  void clear_traffic_light();
  ::idmap::MapTrafficLight* mutable_traffic_light(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficLight >*
      mutable_traffic_light();
  private:
  const ::idmap::MapTrafficLight& _internal_traffic_light(int index) const;
  ::idmap::MapTrafficLight* _internal_add_traffic_light();
  public:
  const ::idmap::MapTrafficLight& traffic_light(int index) const;
  ::idmap::MapTrafficLight* add_traffic_light();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficLight >&
      traffic_light() const;

  // repeated .idmap.MapTrafficSign traffic_info = 9;
  int traffic_info_size() const;
  private:
  int _internal_traffic_info_size() const;
  public:
  void clear_traffic_info();
  ::idmap::MapTrafficSign* mutable_traffic_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficSign >*
      mutable_traffic_info();
  private:
  const ::idmap::MapTrafficSign& _internal_traffic_info(int index) const;
  ::idmap::MapTrafficSign* _internal_add_traffic_info();
  public:
  const ::idmap::MapTrafficSign& traffic_info(int index) const;
  ::idmap::MapTrafficSign* add_traffic_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficSign >&
      traffic_info() const;

  // .idmap.Gnss anchor_pos = 1;
  bool has_anchor_pos() const;
  private:
  bool _internal_has_anchor_pos() const;
  public:
  void clear_anchor_pos();
  const ::idmap::Gnss& anchor_pos() const;
  PROTOBUF_NODISCARD ::idmap::Gnss* release_anchor_pos();
  ::idmap::Gnss* mutable_anchor_pos();
  void set_allocated_anchor_pos(::idmap::Gnss* anchor_pos);
  private:
  const ::idmap::Gnss& _internal_anchor_pos() const;
  ::idmap::Gnss* _internal_mutable_anchor_pos();
  public:
  void unsafe_arena_set_allocated_anchor_pos(
      ::idmap::Gnss* anchor_pos);
  ::idmap::Gnss* unsafe_arena_release_anchor_pos();

  // .idmap.IDMapStatus idmap_status = 3;
  bool has_idmap_status() const;
  private:
  bool _internal_has_idmap_status() const;
  public:
  void clear_idmap_status();
  const ::idmap::IDMapStatus& idmap_status() const;
  PROTOBUF_NODISCARD ::idmap::IDMapStatus* release_idmap_status();
  ::idmap::IDMapStatus* mutable_idmap_status();
  void set_allocated_idmap_status(::idmap::IDMapStatus* idmap_status);
  private:
  const ::idmap::IDMapStatus& _internal_idmap_status() const;
  ::idmap::IDMapStatus* _internal_mutable_idmap_status();
  public:
  void unsafe_arena_set_allocated_idmap_status(
      ::idmap::IDMapStatus* idmap_status);
  ::idmap::IDMapStatus* unsafe_arena_release_idmap_status();

  // .idmap.PakingIDMapInfo parking_info = 10;
  bool has_parking_info() const;
  private:
  bool _internal_has_parking_info() const;
  public:
  void clear_parking_info();
  const ::idmap::PakingIDMapInfo& parking_info() const;
  PROTOBUF_NODISCARD ::idmap::PakingIDMapInfo* release_parking_info();
  ::idmap::PakingIDMapInfo* mutable_parking_info();
  void set_allocated_parking_info(::idmap::PakingIDMapInfo* parking_info);
  private:
  const ::idmap::PakingIDMapInfo& _internal_parking_info() const;
  ::idmap::PakingIDMapInfo* _internal_mutable_parking_info();
  public:
  void unsafe_arena_set_allocated_parking_info(
      ::idmap::PakingIDMapInfo* parking_info);
  ::idmap::PakingIDMapInfo* unsafe_arena_release_parking_info();

  // .SeqHeaderProto.SeqHeader map_seq_msg = 12;
  bool has_map_seq_msg() const;
  private:
  bool _internal_has_map_seq_msg() const;
  public:
  void clear_map_seq_msg();
  const ::SeqHeaderProto::SeqHeader& map_seq_msg() const;
  PROTOBUF_NODISCARD ::SeqHeaderProto::SeqHeader* release_map_seq_msg();
  ::SeqHeaderProto::SeqHeader* mutable_map_seq_msg();
  void set_allocated_map_seq_msg(::SeqHeaderProto::SeqHeader* map_seq_msg);
  private:
  const ::SeqHeaderProto::SeqHeader& _internal_map_seq_msg() const;
  ::SeqHeaderProto::SeqHeader* _internal_mutable_map_seq_msg();
  public:
  void unsafe_arena_set_allocated_map_seq_msg(
      ::SeqHeaderProto::SeqHeader* map_seq_msg);
  ::SeqHeaderProto::SeqHeader* unsafe_arena_release_map_seq_msg();

  // int32 circle_radius = 2;
  void clear_circle_radius();
  int32_t circle_radius() const;
  void set_circle_radius(int32_t value);
  private:
  int32_t _internal_circle_radius() const;
  void _internal_set_circle_radius(int32_t value);
  public:

  // uint32 data_change_countdown = 11;
  void clear_data_change_countdown();
  uint32_t data_change_countdown() const;
  void set_data_change_countdown(uint32_t value);
  private:
  uint32_t _internal_data_change_countdown() const;
  void _internal_set_data_change_countdown(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idmap.StaticIDMapInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Lane > lanes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Line > lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::RoadBoundary > boundaries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::GroundMarking > ground_markings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficLight > traffic_light_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficSign > traffic_info_;
  ::idmap::Gnss* anchor_pos_;
  ::idmap::IDMapStatus* idmap_status_;
  ::idmap::PakingIDMapInfo* parking_info_;
  ::SeqHeaderProto::SeqHeader* map_seq_msg_;
  int32_t circle_radius_;
  uint32_t data_change_countdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idmap_5fstatic_2eproto;
};
// -------------------------------------------------------------------

class Lane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idmap.Lane) */ {
 public:
  inline Lane() : Lane(nullptr) {}
  ~Lane() override;
  explicit PROTOBUF_CONSTEXPR Lane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Lane(const Lane& from);
  Lane(Lane&& from) noexcept
    : Lane() {
    *this = ::std::move(from);
  }

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lane& operator=(Lane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lane& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lane* internal_default_instance() {
    return reinterpret_cast<const Lane*>(
               &_Lane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Lane& a, Lane& b) {
    a.Swap(&b);
  }
  inline void Swap(Lane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Lane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Lane& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idmap.Lane";
  }
  protected:
  explicit Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneCurvatureListFieldNumber = 6,
    kLaneSlopeListFieldNumber = 7,
    kFrontLaneIdFieldNumber = 10,
    kSuccessorLaneIdFieldNumber = 11,
    kLaneNodeFieldNumber = 12,
    kLanePointsFieldNumber = 13,
    kLaneLevelFieldNumber = 14,
    kAssociatedLaneIdFieldNumber = 20,
    kAssociatedLineIdFieldNumber = 21,
    kAssociatedBoundaryIdFieldNumber = 22,
    kLaneImpassabilityTimeFieldNumber = 5,
    kNotOddFieldNumber = 16,
    kLaneIdFieldNumber = 1,
    kLaneLengthFieldNumber = 2,
    kLaneTypeFieldNumber = 3,
    kLaneDirectionFieldNumber = 4,
    kLaneSpeedMaxFieldNumber = 8,
    kLaneSpeedMinFieldNumber = 9,
    kFloorNumFieldNumber = 15,
    kInNavigationRouteFieldNumber = 17,
    kLaneConfidenceFieldNumber = 19,
    kDataSourceFieldNumber = 18,
    kCrowdSourceCollectTimesFieldNumber = 24,
    kCenterLaneSourcesFieldNumber = 23,
  };
  // repeated .idmap.LaneAttribute lane_curvature_list = 6;
  int lane_curvature_list_size() const;
  private:
  int _internal_lane_curvature_list_size() const;
  public:
  void clear_lane_curvature_list();
  ::idmap::LaneAttribute* mutable_lane_curvature_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute >*
      mutable_lane_curvature_list();
  private:
  const ::idmap::LaneAttribute& _internal_lane_curvature_list(int index) const;
  ::idmap::LaneAttribute* _internal_add_lane_curvature_list();
  public:
  const ::idmap::LaneAttribute& lane_curvature_list(int index) const;
  ::idmap::LaneAttribute* add_lane_curvature_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute >&
      lane_curvature_list() const;

  // repeated .idmap.LaneAttribute lane_slope_list = 7;
  int lane_slope_list_size() const;
  private:
  int _internal_lane_slope_list_size() const;
  public:
  void clear_lane_slope_list();
  ::idmap::LaneAttribute* mutable_lane_slope_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute >*
      mutable_lane_slope_list();
  private:
  const ::idmap::LaneAttribute& _internal_lane_slope_list(int index) const;
  ::idmap::LaneAttribute* _internal_add_lane_slope_list();
  public:
  const ::idmap::LaneAttribute& lane_slope_list(int index) const;
  ::idmap::LaneAttribute* add_lane_slope_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute >&
      lane_slope_list() const;

  // repeated uint64 front_lane_id = 10;
  int front_lane_id_size() const;
  private:
  int _internal_front_lane_id_size() const;
  public:
  void clear_front_lane_id();
  private:
  uint64_t _internal_front_lane_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_front_lane_id() const;
  void _internal_add_front_lane_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_front_lane_id();
  public:
  uint64_t front_lane_id(int index) const;
  void set_front_lane_id(int index, uint64_t value);
  void add_front_lane_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      front_lane_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_front_lane_id();

  // repeated uint64 successor_lane_id = 11;
  int successor_lane_id_size() const;
  private:
  int _internal_successor_lane_id_size() const;
  public:
  void clear_successor_lane_id();
  private:
  uint64_t _internal_successor_lane_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_successor_lane_id() const;
  void _internal_add_successor_lane_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_successor_lane_id();
  public:
  uint64_t successor_lane_id(int index) const;
  void set_successor_lane_id(int index, uint64_t value);
  void add_successor_lane_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      successor_lane_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_successor_lane_id();

  // repeated .idmap.LaneNode lane_node = 12;
  int lane_node_size() const;
  private:
  int _internal_lane_node_size() const;
  public:
  void clear_lane_node();
  ::idmap::LaneNode* mutable_lane_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneNode >*
      mutable_lane_node();
  private:
  const ::idmap::LaneNode& _internal_lane_node(int index) const;
  ::idmap::LaneNode* _internal_add_lane_node();
  public:
  const ::idmap::LaneNode& lane_node(int index) const;
  ::idmap::LaneNode* add_lane_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneNode >&
      lane_node() const;

  // repeated .idmap.Gnss lane_points = 13;
  int lane_points_size() const;
  private:
  int _internal_lane_points_size() const;
  public:
  void clear_lane_points();
  ::idmap::Gnss* mutable_lane_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
      mutable_lane_points();
  private:
  const ::idmap::Gnss& _internal_lane_points(int index) const;
  ::idmap::Gnss* _internal_add_lane_points();
  public:
  const ::idmap::Gnss& lane_points(int index) const;
  ::idmap::Gnss* add_lane_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
      lane_points() const;

  // repeated .idmap.Zlevel lane_level = 14;
  int lane_level_size() const;
  private:
  int _internal_lane_level_size() const;
  public:
  void clear_lane_level();
  ::idmap::Zlevel* mutable_lane_level(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Zlevel >*
      mutable_lane_level();
  private:
  const ::idmap::Zlevel& _internal_lane_level(int index) const;
  ::idmap::Zlevel* _internal_add_lane_level();
  public:
  const ::idmap::Zlevel& lane_level(int index) const;
  ::idmap::Zlevel* add_lane_level();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Zlevel >&
      lane_level() const;

  // repeated uint64 associated_lane_id = 20;
  int associated_lane_id_size() const;
  private:
  int _internal_associated_lane_id_size() const;
  public:
  void clear_associated_lane_id();
  private:
  uint64_t _internal_associated_lane_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_associated_lane_id() const;
  void _internal_add_associated_lane_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_associated_lane_id();
  public:
  uint64_t associated_lane_id(int index) const;
  void set_associated_lane_id(int index, uint64_t value);
  void add_associated_lane_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      associated_lane_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_associated_lane_id();

  // repeated uint64 associated_line_id = 21;
  int associated_line_id_size() const;
  private:
  int _internal_associated_line_id_size() const;
  public:
  void clear_associated_line_id();
  private:
  uint64_t _internal_associated_line_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_associated_line_id() const;
  void _internal_add_associated_line_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_associated_line_id();
  public:
  uint64_t associated_line_id(int index) const;
  void set_associated_line_id(int index, uint64_t value);
  void add_associated_line_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      associated_line_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_associated_line_id();

  // repeated uint64 associated_boundary_id = 22;
  int associated_boundary_id_size() const;
  private:
  int _internal_associated_boundary_id_size() const;
  public:
  void clear_associated_boundary_id();
  private:
  uint64_t _internal_associated_boundary_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_associated_boundary_id() const;
  void _internal_add_associated_boundary_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_associated_boundary_id();
  public:
  uint64_t associated_boundary_id(int index) const;
  void set_associated_boundary_id(int index, uint64_t value);
  void add_associated_boundary_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      associated_boundary_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_associated_boundary_id();

  // string lane_impassability_time = 5;
  void clear_lane_impassability_time();
  const std::string& lane_impassability_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lane_impassability_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lane_impassability_time();
  PROTOBUF_NODISCARD std::string* release_lane_impassability_time();
  void set_allocated_lane_impassability_time(std::string* lane_impassability_time);
  private:
  const std::string& _internal_lane_impassability_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lane_impassability_time(const std::string& value);
  std::string* _internal_mutable_lane_impassability_time();
  public:

  // .idmap.NotODD not_odd = 16;
  bool has_not_odd() const;
  private:
  bool _internal_has_not_odd() const;
  public:
  void clear_not_odd();
  const ::idmap::NotODD& not_odd() const;
  PROTOBUF_NODISCARD ::idmap::NotODD* release_not_odd();
  ::idmap::NotODD* mutable_not_odd();
  void set_allocated_not_odd(::idmap::NotODD* not_odd);
  private:
  const ::idmap::NotODD& _internal_not_odd() const;
  ::idmap::NotODD* _internal_mutable_not_odd();
  public:
  void unsafe_arena_set_allocated_not_odd(
      ::idmap::NotODD* not_odd);
  ::idmap::NotODD* unsafe_arena_release_not_odd();

  // uint64 lane_id = 1;
  void clear_lane_id();
  uint64_t lane_id() const;
  void set_lane_id(uint64_t value);
  private:
  uint64_t _internal_lane_id() const;
  void _internal_set_lane_id(uint64_t value);
  public:

  // double lane_length = 2;
  void clear_lane_length();
  double lane_length() const;
  void set_lane_length(double value);
  private:
  double _internal_lane_length() const;
  void _internal_set_lane_length(double value);
  public:

  // uint32 lane_type = 3;
  void clear_lane_type();
  uint32_t lane_type() const;
  void set_lane_type(uint32_t value);
  private:
  uint32_t _internal_lane_type() const;
  void _internal_set_lane_type(uint32_t value);
  public:

  // uint32 lane_direction = 4;
  void clear_lane_direction();
  uint32_t lane_direction() const;
  void set_lane_direction(uint32_t value);
  private:
  uint32_t _internal_lane_direction() const;
  void _internal_set_lane_direction(uint32_t value);
  public:

  // uint32 lane_speed_max = 8;
  void clear_lane_speed_max();
  uint32_t lane_speed_max() const;
  void set_lane_speed_max(uint32_t value);
  private:
  uint32_t _internal_lane_speed_max() const;
  void _internal_set_lane_speed_max(uint32_t value);
  public:

  // uint32 lane_speed_min = 9;
  void clear_lane_speed_min();
  uint32_t lane_speed_min() const;
  void set_lane_speed_min(uint32_t value);
  private:
  uint32_t _internal_lane_speed_min() const;
  void _internal_set_lane_speed_min(uint32_t value);
  public:

  // int32 floor_num = 15;
  void clear_floor_num();
  int32_t floor_num() const;
  void set_floor_num(int32_t value);
  private:
  int32_t _internal_floor_num() const;
  void _internal_set_floor_num(int32_t value);
  public:

  // uint32 in_navigation_route = 17;
  void clear_in_navigation_route();
  uint32_t in_navigation_route() const;
  void set_in_navigation_route(uint32_t value);
  private:
  uint32_t _internal_in_navigation_route() const;
  void _internal_set_in_navigation_route(uint32_t value);
  public:

  // double lane_confidence = 19;
  void clear_lane_confidence();
  double lane_confidence() const;
  void set_lane_confidence(double value);
  private:
  double _internal_lane_confidence() const;
  void _internal_set_lane_confidence(double value);
  public:

  // .idmap.MapDataSource data_source = 18;
  void clear_data_source();
  ::idmap::MapDataSource data_source() const;
  void set_data_source(::idmap::MapDataSource value);
  private:
  ::idmap::MapDataSource _internal_data_source() const;
  void _internal_set_data_source(::idmap::MapDataSource value);
  public:

  // uint32 crowd_source_collect_times = 24;
  void clear_crowd_source_collect_times();
  uint32_t crowd_source_collect_times() const;
  void set_crowd_source_collect_times(uint32_t value);
  private:
  uint32_t _internal_crowd_source_collect_times() const;
  void _internal_set_crowd_source_collect_times(uint32_t value);
  public:

  // uint64 center_lane_sources = 23;
  void clear_center_lane_sources();
  uint64_t center_lane_sources() const;
  void set_center_lane_sources(uint64_t value);
  private:
  uint64_t _internal_center_lane_sources() const;
  void _internal_set_center_lane_sources(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idmap.Lane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute > lane_curvature_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute > lane_slope_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > front_lane_id_;
  mutable std::atomic<int> _front_lane_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > successor_lane_id_;
  mutable std::atomic<int> _successor_lane_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneNode > lane_node_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss > lane_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Zlevel > lane_level_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > associated_lane_id_;
  mutable std::atomic<int> _associated_lane_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > associated_line_id_;
  mutable std::atomic<int> _associated_line_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > associated_boundary_id_;
  mutable std::atomic<int> _associated_boundary_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_impassability_time_;
  ::idmap::NotODD* not_odd_;
  uint64_t lane_id_;
  double lane_length_;
  uint32_t lane_type_;
  uint32_t lane_direction_;
  uint32_t lane_speed_max_;
  uint32_t lane_speed_min_;
  int32_t floor_num_;
  uint32_t in_navigation_route_;
  double lane_confidence_;
  int data_source_;
  uint32_t crowd_source_collect_times_;
  uint64_t center_lane_sources_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idmap_5fstatic_2eproto;
};
// -------------------------------------------------------------------

class Line final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idmap.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  explicit PROTOBUF_CONSTEXPR Line(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Line& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idmap.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinePointsFieldNumber = 2,
    kLineTypeFieldNumber = 3,
    kLineIdFieldNumber = 1,
    kLinemarkingTypeFieldNumber = 4,
    kColorFieldNumber = 5,
    kLineConfidenceFieldNumber = 6,
  };
  // repeated .idmap.Gnss line_points = 2;
  int line_points_size() const;
  private:
  int _internal_line_points_size() const;
  public:
  void clear_line_points();
  ::idmap::Gnss* mutable_line_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
      mutable_line_points();
  private:
  const ::idmap::Gnss& _internal_line_points(int index) const;
  ::idmap::Gnss* _internal_add_line_points();
  public:
  const ::idmap::Gnss& line_points(int index) const;
  ::idmap::Gnss* add_line_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
      line_points() const;

  // repeated .idmap.LineType line_type = 3;
  int line_type_size() const;
  private:
  int _internal_line_type_size() const;
  public:
  void clear_line_type();
  private:
  ::idmap::LineType _internal_line_type(int index) const;
  void _internal_add_line_type(::idmap::LineType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_line_type();
  public:
  ::idmap::LineType line_type(int index) const;
  void set_line_type(int index, ::idmap::LineType value);
  void add_line_type(::idmap::LineType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& line_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_line_type();

  // uint64 line_id = 1;
  void clear_line_id();
  uint64_t line_id() const;
  void set_line_id(uint64_t value);
  private:
  uint64_t _internal_line_id() const;
  void _internal_set_line_id(uint64_t value);
  public:

  // .idmap.LineMarkingType linemarking_type = 4;
  void clear_linemarking_type();
  ::idmap::LineMarkingType linemarking_type() const;
  void set_linemarking_type(::idmap::LineMarkingType value);
  private:
  ::idmap::LineMarkingType _internal_linemarking_type() const;
  void _internal_set_linemarking_type(::idmap::LineMarkingType value);
  public:

  // .idmap.Color color = 5;
  void clear_color();
  ::idmap::Color color() const;
  void set_color(::idmap::Color value);
  private:
  ::idmap::Color _internal_color() const;
  void _internal_set_color(::idmap::Color value);
  public:

  // double line_confidence = 6;
  void clear_line_confidence();
  double line_confidence() const;
  void set_line_confidence(double value);
  private:
  double _internal_line_confidence() const;
  void _internal_set_line_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:idmap.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss > line_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> line_type_;
  mutable std::atomic<int> _line_type_cached_byte_size_;
  uint64_t line_id_;
  int linemarking_type_;
  int color_;
  double line_confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idmap_5fstatic_2eproto;
};
// -------------------------------------------------------------------

class RoadBoundary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idmap.RoadBoundary) */ {
 public:
  inline RoadBoundary() : RoadBoundary(nullptr) {}
  ~RoadBoundary() override;
  explicit PROTOBUF_CONSTEXPR RoadBoundary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadBoundary(const RoadBoundary& from);
  RoadBoundary(RoadBoundary&& from) noexcept
    : RoadBoundary() {
    *this = ::std::move(from);
  }

  inline RoadBoundary& operator=(const RoadBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadBoundary& operator=(RoadBoundary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadBoundary& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadBoundary* internal_default_instance() {
    return reinterpret_cast<const RoadBoundary*>(
               &_RoadBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoadBoundary& a, RoadBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadBoundary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoadBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoadBoundary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoadBoundary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoadBoundary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadBoundary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idmap.RoadBoundary";
  }
  protected:
  explicit RoadBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundaryPointsFieldNumber = 2,
    kRoadBoundaryIdFieldNumber = 1,
    kBoundaryConfidenceFieldNumber = 4,
    kBoundaryTypeFieldNumber = 3,
  };
  // repeated .idmap.Gnss boundary_points = 2;
  int boundary_points_size() const;
  private:
  int _internal_boundary_points_size() const;
  public:
  void clear_boundary_points();
  ::idmap::Gnss* mutable_boundary_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
      mutable_boundary_points();
  private:
  const ::idmap::Gnss& _internal_boundary_points(int index) const;
  ::idmap::Gnss* _internal_add_boundary_points();
  public:
  const ::idmap::Gnss& boundary_points(int index) const;
  ::idmap::Gnss* add_boundary_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
      boundary_points() const;

  // uint64 road_boundary_id = 1;
  void clear_road_boundary_id();
  uint64_t road_boundary_id() const;
  void set_road_boundary_id(uint64_t value);
  private:
  uint64_t _internal_road_boundary_id() const;
  void _internal_set_road_boundary_id(uint64_t value);
  public:

  // double boundary_confidence = 4;
  void clear_boundary_confidence();
  double boundary_confidence() const;
  void set_boundary_confidence(double value);
  private:
  double _internal_boundary_confidence() const;
  void _internal_set_boundary_confidence(double value);
  public:

  // .idmap.RoadBoundaryType boundary_type = 3;
  void clear_boundary_type();
  ::idmap::RoadBoundaryType boundary_type() const;
  void set_boundary_type(::idmap::RoadBoundaryType value);
  private:
  ::idmap::RoadBoundaryType _internal_boundary_type() const;
  void _internal_set_boundary_type(::idmap::RoadBoundaryType value);
  public:

  // @@protoc_insertion_point(class_scope:idmap.RoadBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss > boundary_points_;
  uint64_t road_boundary_id_;
  double boundary_confidence_;
  int boundary_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idmap_5fstatic_2eproto;
};
// -------------------------------------------------------------------

class GroundMarking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idmap.GroundMarking) */ {
 public:
  inline GroundMarking() : GroundMarking(nullptr) {}
  ~GroundMarking() override;
  explicit PROTOBUF_CONSTEXPR GroundMarking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroundMarking(const GroundMarking& from);
  GroundMarking(GroundMarking&& from) noexcept
    : GroundMarking() {
    *this = ::std::move(from);
  }

  inline GroundMarking& operator=(const GroundMarking& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundMarking& operator=(GroundMarking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroundMarking& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundMarking* internal_default_instance() {
    return reinterpret_cast<const GroundMarking*>(
               &_GroundMarking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroundMarking& a, GroundMarking& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundMarking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundMarking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroundMarking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroundMarking>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroundMarking& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroundMarking& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundMarking* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idmap.GroundMarking";
  }
  protected:
  explicit GroundMarking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kLaneIdGroundmarkingFieldNumber = 7,
    kSignValueFieldNumber = 4,
    kGroundmarkingIdFieldNumber = 1,
    kGdmTypeFieldNumber = 3,
    kColorFieldNumber = 5,
    kGdpTypeFieldNumber = 6,
  };
  // repeated .idmap.Gnss points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::idmap::Gnss* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
      mutable_points();
  private:
  const ::idmap::Gnss& _internal_points(int index) const;
  ::idmap::Gnss* _internal_add_points();
  public:
  const ::idmap::Gnss& points(int index) const;
  ::idmap::Gnss* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
      points() const;

  // repeated uint64 lane_id_groundmarking = 7;
  int lane_id_groundmarking_size() const;
  private:
  int _internal_lane_id_groundmarking_size() const;
  public:
  void clear_lane_id_groundmarking();
  private:
  uint64_t _internal_lane_id_groundmarking(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_lane_id_groundmarking() const;
  void _internal_add_lane_id_groundmarking(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_lane_id_groundmarking();
  public:
  uint64_t lane_id_groundmarking(int index) const;
  void set_lane_id_groundmarking(int index, uint64_t value);
  void add_lane_id_groundmarking(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      lane_id_groundmarking() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_lane_id_groundmarking();

  // string sign_value = 4;
  void clear_sign_value();
  const std::string& sign_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign_value();
  PROTOBUF_NODISCARD std::string* release_sign_value();
  void set_allocated_sign_value(std::string* sign_value);
  private:
  const std::string& _internal_sign_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign_value(const std::string& value);
  std::string* _internal_mutable_sign_value();
  public:

  // uint64 groundmarking_id = 1;
  void clear_groundmarking_id();
  uint64_t groundmarking_id() const;
  void set_groundmarking_id(uint64_t value);
  private:
  uint64_t _internal_groundmarking_id() const;
  void _internal_set_groundmarking_id(uint64_t value);
  public:

  // .idmap.GroundMarkType gdm_type = 3;
  void clear_gdm_type();
  ::idmap::GroundMarkType gdm_type() const;
  void set_gdm_type(::idmap::GroundMarkType value);
  private:
  ::idmap::GroundMarkType _internal_gdm_type() const;
  void _internal_set_gdm_type(::idmap::GroundMarkType value);
  public:

  // .idmap.Color color = 5;
  void clear_color();
  ::idmap::Color color() const;
  void set_color(::idmap::Color value);
  private:
  ::idmap::Color _internal_color() const;
  void _internal_set_color(::idmap::Color value);
  public:

  // .idmap.GroundMarkPattern gdp_type = 6;
  void clear_gdp_type();
  ::idmap::GroundMarkPattern gdp_type() const;
  void set_gdp_type(::idmap::GroundMarkPattern value);
  private:
  ::idmap::GroundMarkPattern _internal_gdp_type() const;
  void _internal_set_gdp_type(::idmap::GroundMarkPattern value);
  public:

  // @@protoc_insertion_point(class_scope:idmap.GroundMarking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > lane_id_groundmarking_;
  mutable std::atomic<int> _lane_id_groundmarking_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_value_;
  uint64_t groundmarking_id_;
  int gdm_type_;
  int color_;
  int gdp_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idmap_5fstatic_2eproto;
};
// -------------------------------------------------------------------

class MapTrafficLight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idmap.MapTrafficLight) */ {
 public:
  inline MapTrafficLight() : MapTrafficLight(nullptr) {}
  ~MapTrafficLight() override;
  explicit PROTOBUF_CONSTEXPR MapTrafficLight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapTrafficLight(const MapTrafficLight& from);
  MapTrafficLight(MapTrafficLight&& from) noexcept
    : MapTrafficLight() {
    *this = ::std::move(from);
  }

  inline MapTrafficLight& operator=(const MapTrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTrafficLight& operator=(MapTrafficLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTrafficLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapTrafficLight* internal_default_instance() {
    return reinterpret_cast<const MapTrafficLight*>(
               &_MapTrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapTrafficLight& a, MapTrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTrafficLight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTrafficLight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapTrafficLight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapTrafficLight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapTrafficLight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTrafficLight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idmap.MapTrafficLight";
  }
  protected:
  explicit MapTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdTfcLightFieldNumber = 2,
    kGnssPositionFieldNumber = 1,
    kTrafficLightIdFieldNumber = 3,
  };
  // repeated uint64 lane_id_tfc_light = 2;
  int lane_id_tfc_light_size() const;
  private:
  int _internal_lane_id_tfc_light_size() const;
  public:
  void clear_lane_id_tfc_light();
  private:
  uint64_t _internal_lane_id_tfc_light(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_lane_id_tfc_light() const;
  void _internal_add_lane_id_tfc_light(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_lane_id_tfc_light();
  public:
  uint64_t lane_id_tfc_light(int index) const;
  void set_lane_id_tfc_light(int index, uint64_t value);
  void add_lane_id_tfc_light(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      lane_id_tfc_light() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_lane_id_tfc_light();

  // .idmap.Gnss gnss_position = 1;
  bool has_gnss_position() const;
  private:
  bool _internal_has_gnss_position() const;
  public:
  void clear_gnss_position();
  const ::idmap::Gnss& gnss_position() const;
  PROTOBUF_NODISCARD ::idmap::Gnss* release_gnss_position();
  ::idmap::Gnss* mutable_gnss_position();
  void set_allocated_gnss_position(::idmap::Gnss* gnss_position);
  private:
  const ::idmap::Gnss& _internal_gnss_position() const;
  ::idmap::Gnss* _internal_mutable_gnss_position();
  public:
  void unsafe_arena_set_allocated_gnss_position(
      ::idmap::Gnss* gnss_position);
  ::idmap::Gnss* unsafe_arena_release_gnss_position();

  // uint64 traffic_light_id = 3;
  void clear_traffic_light_id();
  uint64_t traffic_light_id() const;
  void set_traffic_light_id(uint64_t value);
  private:
  uint64_t _internal_traffic_light_id() const;
  void _internal_set_traffic_light_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idmap.MapTrafficLight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > lane_id_tfc_light_;
  mutable std::atomic<int> _lane_id_tfc_light_cached_byte_size_;
  ::idmap::Gnss* gnss_position_;
  uint64_t traffic_light_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idmap_5fstatic_2eproto;
};
// -------------------------------------------------------------------

class MapTrafficSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idmap.MapTrafficSign) */ {
 public:
  inline MapTrafficSign() : MapTrafficSign(nullptr) {}
  ~MapTrafficSign() override;
  explicit PROTOBUF_CONSTEXPR MapTrafficSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapTrafficSign(const MapTrafficSign& from);
  MapTrafficSign(MapTrafficSign&& from) noexcept
    : MapTrafficSign() {
    *this = ::std::move(from);
  }

  inline MapTrafficSign& operator=(const MapTrafficSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTrafficSign& operator=(MapTrafficSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTrafficSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapTrafficSign* internal_default_instance() {
    return reinterpret_cast<const MapTrafficSign*>(
               &_MapTrafficSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MapTrafficSign& a, MapTrafficSign& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTrafficSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTrafficSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTrafficSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapTrafficSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapTrafficSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapTrafficSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTrafficSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idmap.MapTrafficSign";
  }
  protected:
  explicit MapTrafficSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignValueFieldNumber = 3,
    kCenterPositionFieldNumber = 2,
    kLaneIdTfcSignFieldNumber = 4,
    kTrafficSignIdFieldNumber = 5,
    kSignTypeFieldNumber = 1,
  };
  // string sign_value = 3;
  void clear_sign_value();
  const std::string& sign_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign_value();
  PROTOBUF_NODISCARD std::string* release_sign_value();
  void set_allocated_sign_value(std::string* sign_value);
  private:
  const std::string& _internal_sign_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign_value(const std::string& value);
  std::string* _internal_mutable_sign_value();
  public:

  // .idmap.Gnss center_position = 2;
  bool has_center_position() const;
  private:
  bool _internal_has_center_position() const;
  public:
  void clear_center_position();
  const ::idmap::Gnss& center_position() const;
  PROTOBUF_NODISCARD ::idmap::Gnss* release_center_position();
  ::idmap::Gnss* mutable_center_position();
  void set_allocated_center_position(::idmap::Gnss* center_position);
  private:
  const ::idmap::Gnss& _internal_center_position() const;
  ::idmap::Gnss* _internal_mutable_center_position();
  public:
  void unsafe_arena_set_allocated_center_position(
      ::idmap::Gnss* center_position);
  ::idmap::Gnss* unsafe_arena_release_center_position();

  // uint64 lane_id_tfc_sign = 4;
  void clear_lane_id_tfc_sign();
  uint64_t lane_id_tfc_sign() const;
  void set_lane_id_tfc_sign(uint64_t value);
  private:
  uint64_t _internal_lane_id_tfc_sign() const;
  void _internal_set_lane_id_tfc_sign(uint64_t value);
  public:

  // uint64 traffic_sign_id = 5;
  void clear_traffic_sign_id();
  uint64_t traffic_sign_id() const;
  void set_traffic_sign_id(uint64_t value);
  private:
  uint64_t _internal_traffic_sign_id() const;
  void _internal_set_traffic_sign_id(uint64_t value);
  public:

  // .idmap.SignType sign_type = 1;
  void clear_sign_type();
  ::idmap::SignType sign_type() const;
  void set_sign_type(::idmap::SignType value);
  private:
  ::idmap::SignType _internal_sign_type() const;
  void _internal_set_sign_type(::idmap::SignType value);
  public:

  // @@protoc_insertion_point(class_scope:idmap.MapTrafficSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_value_;
  ::idmap::Gnss* center_position_;
  uint64_t lane_id_tfc_sign_;
  uint64_t traffic_sign_id_;
  int sign_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idmap_5fstatic_2eproto;
};
// -------------------------------------------------------------------

class Toll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idmap.Toll) */ {
 public:
  inline Toll() : Toll(nullptr) {}
  ~Toll() override;
  explicit PROTOBUF_CONSTEXPR Toll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Toll(const Toll& from);
  Toll(Toll&& from) noexcept
    : Toll() {
    *this = ::std::move(from);
  }

  inline Toll& operator=(const Toll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Toll& operator=(Toll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Toll& default_instance() {
    return *internal_default_instance();
  }
  static inline const Toll* internal_default_instance() {
    return reinterpret_cast<const Toll*>(
               &_Toll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Toll& a, Toll& b) {
    a.Swap(&b);
  }
  inline void Swap(Toll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Toll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Toll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Toll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Toll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Toll& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Toll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idmap.Toll";
  }
  protected:
  explicit Toll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGnssTollFieldNumber = 2,
    kTollIdFieldNumber = 1,
  };
  // repeated .idmap.Gnss gnss_toll = 2;
  int gnss_toll_size() const;
  private:
  int _internal_gnss_toll_size() const;
  public:
  void clear_gnss_toll();
  ::idmap::Gnss* mutable_gnss_toll(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
      mutable_gnss_toll();
  private:
  const ::idmap::Gnss& _internal_gnss_toll(int index) const;
  ::idmap::Gnss* _internal_add_gnss_toll();
  public:
  const ::idmap::Gnss& gnss_toll(int index) const;
  ::idmap::Gnss* add_gnss_toll();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
      gnss_toll() const;

  // uint64 toll_id = 1;
  void clear_toll_id();
  uint64_t toll_id() const;
  void set_toll_id(uint64_t value);
  private:
  uint64_t _internal_toll_id() const;
  void _internal_set_toll_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:idmap.Toll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss > gnss_toll_;
  uint64_t toll_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idmap_5fstatic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StaticIDMapInfo

// .idmap.Gnss anchor_pos = 1;
inline bool StaticIDMapInfo::_internal_has_anchor_pos() const {
  return this != internal_default_instance() && anchor_pos_ != nullptr;
}
inline bool StaticIDMapInfo::has_anchor_pos() const {
  return _internal_has_anchor_pos();
}
inline const ::idmap::Gnss& StaticIDMapInfo::_internal_anchor_pos() const {
  const ::idmap::Gnss* p = anchor_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::idmap::Gnss&>(
      ::idmap::_Gnss_default_instance_);
}
inline const ::idmap::Gnss& StaticIDMapInfo::anchor_pos() const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.anchor_pos)
  return _internal_anchor_pos();
}
inline void StaticIDMapInfo::unsafe_arena_set_allocated_anchor_pos(
    ::idmap::Gnss* anchor_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_pos_);
  }
  anchor_pos_ = anchor_pos;
  if (anchor_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idmap.StaticIDMapInfo.anchor_pos)
}
inline ::idmap::Gnss* StaticIDMapInfo::release_anchor_pos() {
  
  ::idmap::Gnss* temp = anchor_pos_;
  anchor_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idmap::Gnss* StaticIDMapInfo::unsafe_arena_release_anchor_pos() {
  // @@protoc_insertion_point(field_release:idmap.StaticIDMapInfo.anchor_pos)
  
  ::idmap::Gnss* temp = anchor_pos_;
  anchor_pos_ = nullptr;
  return temp;
}
inline ::idmap::Gnss* StaticIDMapInfo::_internal_mutable_anchor_pos() {
  
  if (anchor_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::idmap::Gnss>(GetArenaForAllocation());
    anchor_pos_ = p;
  }
  return anchor_pos_;
}
inline ::idmap::Gnss* StaticIDMapInfo::mutable_anchor_pos() {
  ::idmap::Gnss* _msg = _internal_mutable_anchor_pos();
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.anchor_pos)
  return _msg;
}
inline void StaticIDMapInfo::set_allocated_anchor_pos(::idmap::Gnss* anchor_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_pos_);
  }
  if (anchor_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_pos));
    if (message_arena != submessage_arena) {
      anchor_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_pos, submessage_arena);
    }
    
  } else {
    
  }
  anchor_pos_ = anchor_pos;
  // @@protoc_insertion_point(field_set_allocated:idmap.StaticIDMapInfo.anchor_pos)
}

// int32 circle_radius = 2;
inline void StaticIDMapInfo::clear_circle_radius() {
  circle_radius_ = 0;
}
inline int32_t StaticIDMapInfo::_internal_circle_radius() const {
  return circle_radius_;
}
inline int32_t StaticIDMapInfo::circle_radius() const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.circle_radius)
  return _internal_circle_radius();
}
inline void StaticIDMapInfo::_internal_set_circle_radius(int32_t value) {
  
  circle_radius_ = value;
}
inline void StaticIDMapInfo::set_circle_radius(int32_t value) {
  _internal_set_circle_radius(value);
  // @@protoc_insertion_point(field_set:idmap.StaticIDMapInfo.circle_radius)
}

// .idmap.IDMapStatus idmap_status = 3;
inline bool StaticIDMapInfo::_internal_has_idmap_status() const {
  return this != internal_default_instance() && idmap_status_ != nullptr;
}
inline bool StaticIDMapInfo::has_idmap_status() const {
  return _internal_has_idmap_status();
}
inline const ::idmap::IDMapStatus& StaticIDMapInfo::_internal_idmap_status() const {
  const ::idmap::IDMapStatus* p = idmap_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::idmap::IDMapStatus&>(
      ::idmap::_IDMapStatus_default_instance_);
}
inline const ::idmap::IDMapStatus& StaticIDMapInfo::idmap_status() const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.idmap_status)
  return _internal_idmap_status();
}
inline void StaticIDMapInfo::unsafe_arena_set_allocated_idmap_status(
    ::idmap::IDMapStatus* idmap_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(idmap_status_);
  }
  idmap_status_ = idmap_status;
  if (idmap_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idmap.StaticIDMapInfo.idmap_status)
}
inline ::idmap::IDMapStatus* StaticIDMapInfo::release_idmap_status() {
  
  ::idmap::IDMapStatus* temp = idmap_status_;
  idmap_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idmap::IDMapStatus* StaticIDMapInfo::unsafe_arena_release_idmap_status() {
  // @@protoc_insertion_point(field_release:idmap.StaticIDMapInfo.idmap_status)
  
  ::idmap::IDMapStatus* temp = idmap_status_;
  idmap_status_ = nullptr;
  return temp;
}
inline ::idmap::IDMapStatus* StaticIDMapInfo::_internal_mutable_idmap_status() {
  
  if (idmap_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::idmap::IDMapStatus>(GetArenaForAllocation());
    idmap_status_ = p;
  }
  return idmap_status_;
}
inline ::idmap::IDMapStatus* StaticIDMapInfo::mutable_idmap_status() {
  ::idmap::IDMapStatus* _msg = _internal_mutable_idmap_status();
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.idmap_status)
  return _msg;
}
inline void StaticIDMapInfo::set_allocated_idmap_status(::idmap::IDMapStatus* idmap_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(idmap_status_);
  }
  if (idmap_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(idmap_status));
    if (message_arena != submessage_arena) {
      idmap_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idmap_status, submessage_arena);
    }
    
  } else {
    
  }
  idmap_status_ = idmap_status;
  // @@protoc_insertion_point(field_set_allocated:idmap.StaticIDMapInfo.idmap_status)
}

// repeated .idmap.Lane lanes = 4;
inline int StaticIDMapInfo::_internal_lanes_size() const {
  return lanes_.size();
}
inline int StaticIDMapInfo::lanes_size() const {
  return _internal_lanes_size();
}
inline void StaticIDMapInfo::clear_lanes() {
  lanes_.Clear();
}
inline ::idmap::Lane* StaticIDMapInfo::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.lanes)
  return lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Lane >*
StaticIDMapInfo::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:idmap.StaticIDMapInfo.lanes)
  return &lanes_;
}
inline const ::idmap::Lane& StaticIDMapInfo::_internal_lanes(int index) const {
  return lanes_.Get(index);
}
inline const ::idmap::Lane& StaticIDMapInfo::lanes(int index) const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.lanes)
  return _internal_lanes(index);
}
inline ::idmap::Lane* StaticIDMapInfo::_internal_add_lanes() {
  return lanes_.Add();
}
inline ::idmap::Lane* StaticIDMapInfo::add_lanes() {
  ::idmap::Lane* _add = _internal_add_lanes();
  // @@protoc_insertion_point(field_add:idmap.StaticIDMapInfo.lanes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Lane >&
StaticIDMapInfo::lanes() const {
  // @@protoc_insertion_point(field_list:idmap.StaticIDMapInfo.lanes)
  return lanes_;
}

// repeated .idmap.Line lines = 5;
inline int StaticIDMapInfo::_internal_lines_size() const {
  return lines_.size();
}
inline int StaticIDMapInfo::lines_size() const {
  return _internal_lines_size();
}
inline void StaticIDMapInfo::clear_lines() {
  lines_.Clear();
}
inline ::idmap::Line* StaticIDMapInfo::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.lines)
  return lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Line >*
StaticIDMapInfo::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:idmap.StaticIDMapInfo.lines)
  return &lines_;
}
inline const ::idmap::Line& StaticIDMapInfo::_internal_lines(int index) const {
  return lines_.Get(index);
}
inline const ::idmap::Line& StaticIDMapInfo::lines(int index) const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.lines)
  return _internal_lines(index);
}
inline ::idmap::Line* StaticIDMapInfo::_internal_add_lines() {
  return lines_.Add();
}
inline ::idmap::Line* StaticIDMapInfo::add_lines() {
  ::idmap::Line* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:idmap.StaticIDMapInfo.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Line >&
StaticIDMapInfo::lines() const {
  // @@protoc_insertion_point(field_list:idmap.StaticIDMapInfo.lines)
  return lines_;
}

// repeated .idmap.RoadBoundary boundaries = 6;
inline int StaticIDMapInfo::_internal_boundaries_size() const {
  return boundaries_.size();
}
inline int StaticIDMapInfo::boundaries_size() const {
  return _internal_boundaries_size();
}
inline void StaticIDMapInfo::clear_boundaries() {
  boundaries_.Clear();
}
inline ::idmap::RoadBoundary* StaticIDMapInfo::mutable_boundaries(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.boundaries)
  return boundaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::RoadBoundary >*
StaticIDMapInfo::mutable_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:idmap.StaticIDMapInfo.boundaries)
  return &boundaries_;
}
inline const ::idmap::RoadBoundary& StaticIDMapInfo::_internal_boundaries(int index) const {
  return boundaries_.Get(index);
}
inline const ::idmap::RoadBoundary& StaticIDMapInfo::boundaries(int index) const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.boundaries)
  return _internal_boundaries(index);
}
inline ::idmap::RoadBoundary* StaticIDMapInfo::_internal_add_boundaries() {
  return boundaries_.Add();
}
inline ::idmap::RoadBoundary* StaticIDMapInfo::add_boundaries() {
  ::idmap::RoadBoundary* _add = _internal_add_boundaries();
  // @@protoc_insertion_point(field_add:idmap.StaticIDMapInfo.boundaries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::RoadBoundary >&
StaticIDMapInfo::boundaries() const {
  // @@protoc_insertion_point(field_list:idmap.StaticIDMapInfo.boundaries)
  return boundaries_;
}

// repeated .idmap.GroundMarking ground_markings = 7;
inline int StaticIDMapInfo::_internal_ground_markings_size() const {
  return ground_markings_.size();
}
inline int StaticIDMapInfo::ground_markings_size() const {
  return _internal_ground_markings_size();
}
inline void StaticIDMapInfo::clear_ground_markings() {
  ground_markings_.Clear();
}
inline ::idmap::GroundMarking* StaticIDMapInfo::mutable_ground_markings(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.ground_markings)
  return ground_markings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::GroundMarking >*
StaticIDMapInfo::mutable_ground_markings() {
  // @@protoc_insertion_point(field_mutable_list:idmap.StaticIDMapInfo.ground_markings)
  return &ground_markings_;
}
inline const ::idmap::GroundMarking& StaticIDMapInfo::_internal_ground_markings(int index) const {
  return ground_markings_.Get(index);
}
inline const ::idmap::GroundMarking& StaticIDMapInfo::ground_markings(int index) const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.ground_markings)
  return _internal_ground_markings(index);
}
inline ::idmap::GroundMarking* StaticIDMapInfo::_internal_add_ground_markings() {
  return ground_markings_.Add();
}
inline ::idmap::GroundMarking* StaticIDMapInfo::add_ground_markings() {
  ::idmap::GroundMarking* _add = _internal_add_ground_markings();
  // @@protoc_insertion_point(field_add:idmap.StaticIDMapInfo.ground_markings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::GroundMarking >&
StaticIDMapInfo::ground_markings() const {
  // @@protoc_insertion_point(field_list:idmap.StaticIDMapInfo.ground_markings)
  return ground_markings_;
}

// repeated .idmap.MapTrafficLight traffic_light = 8;
inline int StaticIDMapInfo::_internal_traffic_light_size() const {
  return traffic_light_.size();
}
inline int StaticIDMapInfo::traffic_light_size() const {
  return _internal_traffic_light_size();
}
inline void StaticIDMapInfo::clear_traffic_light() {
  traffic_light_.Clear();
}
inline ::idmap::MapTrafficLight* StaticIDMapInfo::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.traffic_light)
  return traffic_light_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficLight >*
StaticIDMapInfo::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:idmap.StaticIDMapInfo.traffic_light)
  return &traffic_light_;
}
inline const ::idmap::MapTrafficLight& StaticIDMapInfo::_internal_traffic_light(int index) const {
  return traffic_light_.Get(index);
}
inline const ::idmap::MapTrafficLight& StaticIDMapInfo::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.traffic_light)
  return _internal_traffic_light(index);
}
inline ::idmap::MapTrafficLight* StaticIDMapInfo::_internal_add_traffic_light() {
  return traffic_light_.Add();
}
inline ::idmap::MapTrafficLight* StaticIDMapInfo::add_traffic_light() {
  ::idmap::MapTrafficLight* _add = _internal_add_traffic_light();
  // @@protoc_insertion_point(field_add:idmap.StaticIDMapInfo.traffic_light)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficLight >&
StaticIDMapInfo::traffic_light() const {
  // @@protoc_insertion_point(field_list:idmap.StaticIDMapInfo.traffic_light)
  return traffic_light_;
}

// repeated .idmap.MapTrafficSign traffic_info = 9;
inline int StaticIDMapInfo::_internal_traffic_info_size() const {
  return traffic_info_.size();
}
inline int StaticIDMapInfo::traffic_info_size() const {
  return _internal_traffic_info_size();
}
inline void StaticIDMapInfo::clear_traffic_info() {
  traffic_info_.Clear();
}
inline ::idmap::MapTrafficSign* StaticIDMapInfo::mutable_traffic_info(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.traffic_info)
  return traffic_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficSign >*
StaticIDMapInfo::mutable_traffic_info() {
  // @@protoc_insertion_point(field_mutable_list:idmap.StaticIDMapInfo.traffic_info)
  return &traffic_info_;
}
inline const ::idmap::MapTrafficSign& StaticIDMapInfo::_internal_traffic_info(int index) const {
  return traffic_info_.Get(index);
}
inline const ::idmap::MapTrafficSign& StaticIDMapInfo::traffic_info(int index) const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.traffic_info)
  return _internal_traffic_info(index);
}
inline ::idmap::MapTrafficSign* StaticIDMapInfo::_internal_add_traffic_info() {
  return traffic_info_.Add();
}
inline ::idmap::MapTrafficSign* StaticIDMapInfo::add_traffic_info() {
  ::idmap::MapTrafficSign* _add = _internal_add_traffic_info();
  // @@protoc_insertion_point(field_add:idmap.StaticIDMapInfo.traffic_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::MapTrafficSign >&
StaticIDMapInfo::traffic_info() const {
  // @@protoc_insertion_point(field_list:idmap.StaticIDMapInfo.traffic_info)
  return traffic_info_;
}

// .idmap.PakingIDMapInfo parking_info = 10;
inline bool StaticIDMapInfo::_internal_has_parking_info() const {
  return this != internal_default_instance() && parking_info_ != nullptr;
}
inline bool StaticIDMapInfo::has_parking_info() const {
  return _internal_has_parking_info();
}
inline const ::idmap::PakingIDMapInfo& StaticIDMapInfo::_internal_parking_info() const {
  const ::idmap::PakingIDMapInfo* p = parking_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::idmap::PakingIDMapInfo&>(
      ::idmap::_PakingIDMapInfo_default_instance_);
}
inline const ::idmap::PakingIDMapInfo& StaticIDMapInfo::parking_info() const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.parking_info)
  return _internal_parking_info();
}
inline void StaticIDMapInfo::unsafe_arena_set_allocated_parking_info(
    ::idmap::PakingIDMapInfo* parking_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parking_info_);
  }
  parking_info_ = parking_info;
  if (parking_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idmap.StaticIDMapInfo.parking_info)
}
inline ::idmap::PakingIDMapInfo* StaticIDMapInfo::release_parking_info() {
  
  ::idmap::PakingIDMapInfo* temp = parking_info_;
  parking_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idmap::PakingIDMapInfo* StaticIDMapInfo::unsafe_arena_release_parking_info() {
  // @@protoc_insertion_point(field_release:idmap.StaticIDMapInfo.parking_info)
  
  ::idmap::PakingIDMapInfo* temp = parking_info_;
  parking_info_ = nullptr;
  return temp;
}
inline ::idmap::PakingIDMapInfo* StaticIDMapInfo::_internal_mutable_parking_info() {
  
  if (parking_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::idmap::PakingIDMapInfo>(GetArenaForAllocation());
    parking_info_ = p;
  }
  return parking_info_;
}
inline ::idmap::PakingIDMapInfo* StaticIDMapInfo::mutable_parking_info() {
  ::idmap::PakingIDMapInfo* _msg = _internal_mutable_parking_info();
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.parking_info)
  return _msg;
}
inline void StaticIDMapInfo::set_allocated_parking_info(::idmap::PakingIDMapInfo* parking_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parking_info_);
  }
  if (parking_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parking_info));
    if (message_arena != submessage_arena) {
      parking_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_info, submessage_arena);
    }
    
  } else {
    
  }
  parking_info_ = parking_info;
  // @@protoc_insertion_point(field_set_allocated:idmap.StaticIDMapInfo.parking_info)
}

// uint32 data_change_countdown = 11;
inline void StaticIDMapInfo::clear_data_change_countdown() {
  data_change_countdown_ = 0u;
}
inline uint32_t StaticIDMapInfo::_internal_data_change_countdown() const {
  return data_change_countdown_;
}
inline uint32_t StaticIDMapInfo::data_change_countdown() const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.data_change_countdown)
  return _internal_data_change_countdown();
}
inline void StaticIDMapInfo::_internal_set_data_change_countdown(uint32_t value) {
  
  data_change_countdown_ = value;
}
inline void StaticIDMapInfo::set_data_change_countdown(uint32_t value) {
  _internal_set_data_change_countdown(value);
  // @@protoc_insertion_point(field_set:idmap.StaticIDMapInfo.data_change_countdown)
}

// .SeqHeaderProto.SeqHeader map_seq_msg = 12;
inline bool StaticIDMapInfo::_internal_has_map_seq_msg() const {
  return this != internal_default_instance() && map_seq_msg_ != nullptr;
}
inline bool StaticIDMapInfo::has_map_seq_msg() const {
  return _internal_has_map_seq_msg();
}
inline const ::SeqHeaderProto::SeqHeader& StaticIDMapInfo::_internal_map_seq_msg() const {
  const ::SeqHeaderProto::SeqHeader* p = map_seq_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::SeqHeaderProto::SeqHeader&>(
      ::SeqHeaderProto::_SeqHeader_default_instance_);
}
inline const ::SeqHeaderProto::SeqHeader& StaticIDMapInfo::map_seq_msg() const {
  // @@protoc_insertion_point(field_get:idmap.StaticIDMapInfo.map_seq_msg)
  return _internal_map_seq_msg();
}
inline void StaticIDMapInfo::unsafe_arena_set_allocated_map_seq_msg(
    ::SeqHeaderProto::SeqHeader* map_seq_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_seq_msg_);
  }
  map_seq_msg_ = map_seq_msg;
  if (map_seq_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idmap.StaticIDMapInfo.map_seq_msg)
}
inline ::SeqHeaderProto::SeqHeader* StaticIDMapInfo::release_map_seq_msg() {
  
  ::SeqHeaderProto::SeqHeader* temp = map_seq_msg_;
  map_seq_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SeqHeaderProto::SeqHeader* StaticIDMapInfo::unsafe_arena_release_map_seq_msg() {
  // @@protoc_insertion_point(field_release:idmap.StaticIDMapInfo.map_seq_msg)
  
  ::SeqHeaderProto::SeqHeader* temp = map_seq_msg_;
  map_seq_msg_ = nullptr;
  return temp;
}
inline ::SeqHeaderProto::SeqHeader* StaticIDMapInfo::_internal_mutable_map_seq_msg() {
  
  if (map_seq_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SeqHeaderProto::SeqHeader>(GetArenaForAllocation());
    map_seq_msg_ = p;
  }
  return map_seq_msg_;
}
inline ::SeqHeaderProto::SeqHeader* StaticIDMapInfo::mutable_map_seq_msg() {
  ::SeqHeaderProto::SeqHeader* _msg = _internal_mutable_map_seq_msg();
  // @@protoc_insertion_point(field_mutable:idmap.StaticIDMapInfo.map_seq_msg)
  return _msg;
}
inline void StaticIDMapInfo::set_allocated_map_seq_msg(::SeqHeaderProto::SeqHeader* map_seq_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_seq_msg_);
  }
  if (map_seq_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_seq_msg));
    if (message_arena != submessage_arena) {
      map_seq_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_seq_msg, submessage_arena);
    }
    
  } else {
    
  }
  map_seq_msg_ = map_seq_msg;
  // @@protoc_insertion_point(field_set_allocated:idmap.StaticIDMapInfo.map_seq_msg)
}

// -------------------------------------------------------------------

// Lane

// uint64 lane_id = 1;
inline void Lane::clear_lane_id() {
  lane_id_ = uint64_t{0u};
}
inline uint64_t Lane::_internal_lane_id() const {
  return lane_id_;
}
inline uint64_t Lane::lane_id() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_id)
  return _internal_lane_id();
}
inline void Lane::_internal_set_lane_id(uint64_t value) {
  
  lane_id_ = value;
}
inline void Lane::set_lane_id(uint64_t value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.lane_id)
}

// double lane_length = 2;
inline void Lane::clear_lane_length() {
  lane_length_ = 0;
}
inline double Lane::_internal_lane_length() const {
  return lane_length_;
}
inline double Lane::lane_length() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_length)
  return _internal_lane_length();
}
inline void Lane::_internal_set_lane_length(double value) {
  
  lane_length_ = value;
}
inline void Lane::set_lane_length(double value) {
  _internal_set_lane_length(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.lane_length)
}

// uint32 lane_type = 3;
inline void Lane::clear_lane_type() {
  lane_type_ = 0u;
}
inline uint32_t Lane::_internal_lane_type() const {
  return lane_type_;
}
inline uint32_t Lane::lane_type() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_type)
  return _internal_lane_type();
}
inline void Lane::_internal_set_lane_type(uint32_t value) {
  
  lane_type_ = value;
}
inline void Lane::set_lane_type(uint32_t value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.lane_type)
}

// uint32 lane_direction = 4;
inline void Lane::clear_lane_direction() {
  lane_direction_ = 0u;
}
inline uint32_t Lane::_internal_lane_direction() const {
  return lane_direction_;
}
inline uint32_t Lane::lane_direction() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_direction)
  return _internal_lane_direction();
}
inline void Lane::_internal_set_lane_direction(uint32_t value) {
  
  lane_direction_ = value;
}
inline void Lane::set_lane_direction(uint32_t value) {
  _internal_set_lane_direction(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.lane_direction)
}

// string lane_impassability_time = 5;
inline void Lane::clear_lane_impassability_time() {
  lane_impassability_time_.ClearToEmpty();
}
inline const std::string& Lane::lane_impassability_time() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_impassability_time)
  return _internal_lane_impassability_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Lane::set_lane_impassability_time(ArgT0&& arg0, ArgT... args) {
 
 lane_impassability_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idmap.Lane.lane_impassability_time)
}
inline std::string* Lane::mutable_lane_impassability_time() {
  std::string* _s = _internal_mutable_lane_impassability_time();
  // @@protoc_insertion_point(field_mutable:idmap.Lane.lane_impassability_time)
  return _s;
}
inline const std::string& Lane::_internal_lane_impassability_time() const {
  return lane_impassability_time_.Get();
}
inline void Lane::_internal_set_lane_impassability_time(const std::string& value) {
  
  lane_impassability_time_.Set(value, GetArenaForAllocation());
}
inline std::string* Lane::_internal_mutable_lane_impassability_time() {
  
  return lane_impassability_time_.Mutable(GetArenaForAllocation());
}
inline std::string* Lane::release_lane_impassability_time() {
  // @@protoc_insertion_point(field_release:idmap.Lane.lane_impassability_time)
  return lane_impassability_time_.Release();
}
inline void Lane::set_allocated_lane_impassability_time(std::string* lane_impassability_time) {
  if (lane_impassability_time != nullptr) {
    
  } else {
    
  }
  lane_impassability_time_.SetAllocated(lane_impassability_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lane_impassability_time_.IsDefault()) {
    lane_impassability_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idmap.Lane.lane_impassability_time)
}

// repeated .idmap.LaneAttribute lane_curvature_list = 6;
inline int Lane::_internal_lane_curvature_list_size() const {
  return lane_curvature_list_.size();
}
inline int Lane::lane_curvature_list_size() const {
  return _internal_lane_curvature_list_size();
}
inline ::idmap::LaneAttribute* Lane::mutable_lane_curvature_list(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.Lane.lane_curvature_list)
  return lane_curvature_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute >*
Lane::mutable_lane_curvature_list() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.lane_curvature_list)
  return &lane_curvature_list_;
}
inline const ::idmap::LaneAttribute& Lane::_internal_lane_curvature_list(int index) const {
  return lane_curvature_list_.Get(index);
}
inline const ::idmap::LaneAttribute& Lane::lane_curvature_list(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_curvature_list)
  return _internal_lane_curvature_list(index);
}
inline ::idmap::LaneAttribute* Lane::_internal_add_lane_curvature_list() {
  return lane_curvature_list_.Add();
}
inline ::idmap::LaneAttribute* Lane::add_lane_curvature_list() {
  ::idmap::LaneAttribute* _add = _internal_add_lane_curvature_list();
  // @@protoc_insertion_point(field_add:idmap.Lane.lane_curvature_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute >&
Lane::lane_curvature_list() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.lane_curvature_list)
  return lane_curvature_list_;
}

// repeated .idmap.LaneAttribute lane_slope_list = 7;
inline int Lane::_internal_lane_slope_list_size() const {
  return lane_slope_list_.size();
}
inline int Lane::lane_slope_list_size() const {
  return _internal_lane_slope_list_size();
}
inline ::idmap::LaneAttribute* Lane::mutable_lane_slope_list(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.Lane.lane_slope_list)
  return lane_slope_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute >*
Lane::mutable_lane_slope_list() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.lane_slope_list)
  return &lane_slope_list_;
}
inline const ::idmap::LaneAttribute& Lane::_internal_lane_slope_list(int index) const {
  return lane_slope_list_.Get(index);
}
inline const ::idmap::LaneAttribute& Lane::lane_slope_list(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_slope_list)
  return _internal_lane_slope_list(index);
}
inline ::idmap::LaneAttribute* Lane::_internal_add_lane_slope_list() {
  return lane_slope_list_.Add();
}
inline ::idmap::LaneAttribute* Lane::add_lane_slope_list() {
  ::idmap::LaneAttribute* _add = _internal_add_lane_slope_list();
  // @@protoc_insertion_point(field_add:idmap.Lane.lane_slope_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneAttribute >&
Lane::lane_slope_list() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.lane_slope_list)
  return lane_slope_list_;
}

// uint32 lane_speed_max = 8;
inline void Lane::clear_lane_speed_max() {
  lane_speed_max_ = 0u;
}
inline uint32_t Lane::_internal_lane_speed_max() const {
  return lane_speed_max_;
}
inline uint32_t Lane::lane_speed_max() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_speed_max)
  return _internal_lane_speed_max();
}
inline void Lane::_internal_set_lane_speed_max(uint32_t value) {
  
  lane_speed_max_ = value;
}
inline void Lane::set_lane_speed_max(uint32_t value) {
  _internal_set_lane_speed_max(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.lane_speed_max)
}

// uint32 lane_speed_min = 9;
inline void Lane::clear_lane_speed_min() {
  lane_speed_min_ = 0u;
}
inline uint32_t Lane::_internal_lane_speed_min() const {
  return lane_speed_min_;
}
inline uint32_t Lane::lane_speed_min() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_speed_min)
  return _internal_lane_speed_min();
}
inline void Lane::_internal_set_lane_speed_min(uint32_t value) {
  
  lane_speed_min_ = value;
}
inline void Lane::set_lane_speed_min(uint32_t value) {
  _internal_set_lane_speed_min(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.lane_speed_min)
}

// repeated uint64 front_lane_id = 10;
inline int Lane::_internal_front_lane_id_size() const {
  return front_lane_id_.size();
}
inline int Lane::front_lane_id_size() const {
  return _internal_front_lane_id_size();
}
inline void Lane::clear_front_lane_id() {
  front_lane_id_.Clear();
}
inline uint64_t Lane::_internal_front_lane_id(int index) const {
  return front_lane_id_.Get(index);
}
inline uint64_t Lane::front_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.front_lane_id)
  return _internal_front_lane_id(index);
}
inline void Lane::set_front_lane_id(int index, uint64_t value) {
  front_lane_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:idmap.Lane.front_lane_id)
}
inline void Lane::_internal_add_front_lane_id(uint64_t value) {
  front_lane_id_.Add(value);
}
inline void Lane::add_front_lane_id(uint64_t value) {
  _internal_add_front_lane_id(value);
  // @@protoc_insertion_point(field_add:idmap.Lane.front_lane_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::_internal_front_lane_id() const {
  return front_lane_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::front_lane_id() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.front_lane_id)
  return _internal_front_lane_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::_internal_mutable_front_lane_id() {
  return &front_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::mutable_front_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.front_lane_id)
  return _internal_mutable_front_lane_id();
}

// repeated uint64 successor_lane_id = 11;
inline int Lane::_internal_successor_lane_id_size() const {
  return successor_lane_id_.size();
}
inline int Lane::successor_lane_id_size() const {
  return _internal_successor_lane_id_size();
}
inline void Lane::clear_successor_lane_id() {
  successor_lane_id_.Clear();
}
inline uint64_t Lane::_internal_successor_lane_id(int index) const {
  return successor_lane_id_.Get(index);
}
inline uint64_t Lane::successor_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.successor_lane_id)
  return _internal_successor_lane_id(index);
}
inline void Lane::set_successor_lane_id(int index, uint64_t value) {
  successor_lane_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:idmap.Lane.successor_lane_id)
}
inline void Lane::_internal_add_successor_lane_id(uint64_t value) {
  successor_lane_id_.Add(value);
}
inline void Lane::add_successor_lane_id(uint64_t value) {
  _internal_add_successor_lane_id(value);
  // @@protoc_insertion_point(field_add:idmap.Lane.successor_lane_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::_internal_successor_lane_id() const {
  return successor_lane_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::successor_lane_id() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.successor_lane_id)
  return _internal_successor_lane_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::_internal_mutable_successor_lane_id() {
  return &successor_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::mutable_successor_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.successor_lane_id)
  return _internal_mutable_successor_lane_id();
}

// repeated .idmap.LaneNode lane_node = 12;
inline int Lane::_internal_lane_node_size() const {
  return lane_node_.size();
}
inline int Lane::lane_node_size() const {
  return _internal_lane_node_size();
}
inline ::idmap::LaneNode* Lane::mutable_lane_node(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.Lane.lane_node)
  return lane_node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneNode >*
Lane::mutable_lane_node() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.lane_node)
  return &lane_node_;
}
inline const ::idmap::LaneNode& Lane::_internal_lane_node(int index) const {
  return lane_node_.Get(index);
}
inline const ::idmap::LaneNode& Lane::lane_node(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_node)
  return _internal_lane_node(index);
}
inline ::idmap::LaneNode* Lane::_internal_add_lane_node() {
  return lane_node_.Add();
}
inline ::idmap::LaneNode* Lane::add_lane_node() {
  ::idmap::LaneNode* _add = _internal_add_lane_node();
  // @@protoc_insertion_point(field_add:idmap.Lane.lane_node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::LaneNode >&
Lane::lane_node() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.lane_node)
  return lane_node_;
}

// repeated .idmap.Gnss lane_points = 13;
inline int Lane::_internal_lane_points_size() const {
  return lane_points_.size();
}
inline int Lane::lane_points_size() const {
  return _internal_lane_points_size();
}
inline ::idmap::Gnss* Lane::mutable_lane_points(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.Lane.lane_points)
  return lane_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
Lane::mutable_lane_points() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.lane_points)
  return &lane_points_;
}
inline const ::idmap::Gnss& Lane::_internal_lane_points(int index) const {
  return lane_points_.Get(index);
}
inline const ::idmap::Gnss& Lane::lane_points(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_points)
  return _internal_lane_points(index);
}
inline ::idmap::Gnss* Lane::_internal_add_lane_points() {
  return lane_points_.Add();
}
inline ::idmap::Gnss* Lane::add_lane_points() {
  ::idmap::Gnss* _add = _internal_add_lane_points();
  // @@protoc_insertion_point(field_add:idmap.Lane.lane_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
Lane::lane_points() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.lane_points)
  return lane_points_;
}

// repeated .idmap.Zlevel lane_level = 14;
inline int Lane::_internal_lane_level_size() const {
  return lane_level_.size();
}
inline int Lane::lane_level_size() const {
  return _internal_lane_level_size();
}
inline ::idmap::Zlevel* Lane::mutable_lane_level(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.Lane.lane_level)
  return lane_level_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Zlevel >*
Lane::mutable_lane_level() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.lane_level)
  return &lane_level_;
}
inline const ::idmap::Zlevel& Lane::_internal_lane_level(int index) const {
  return lane_level_.Get(index);
}
inline const ::idmap::Zlevel& Lane::lane_level(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_level)
  return _internal_lane_level(index);
}
inline ::idmap::Zlevel* Lane::_internal_add_lane_level() {
  return lane_level_.Add();
}
inline ::idmap::Zlevel* Lane::add_lane_level() {
  ::idmap::Zlevel* _add = _internal_add_lane_level();
  // @@protoc_insertion_point(field_add:idmap.Lane.lane_level)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Zlevel >&
Lane::lane_level() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.lane_level)
  return lane_level_;
}

// int32 floor_num = 15;
inline void Lane::clear_floor_num() {
  floor_num_ = 0;
}
inline int32_t Lane::_internal_floor_num() const {
  return floor_num_;
}
inline int32_t Lane::floor_num() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.floor_num)
  return _internal_floor_num();
}
inline void Lane::_internal_set_floor_num(int32_t value) {
  
  floor_num_ = value;
}
inline void Lane::set_floor_num(int32_t value) {
  _internal_set_floor_num(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.floor_num)
}

// .idmap.NotODD not_odd = 16;
inline bool Lane::_internal_has_not_odd() const {
  return this != internal_default_instance() && not_odd_ != nullptr;
}
inline bool Lane::has_not_odd() const {
  return _internal_has_not_odd();
}
inline const ::idmap::NotODD& Lane::_internal_not_odd() const {
  const ::idmap::NotODD* p = not_odd_;
  return p != nullptr ? *p : reinterpret_cast<const ::idmap::NotODD&>(
      ::idmap::_NotODD_default_instance_);
}
inline const ::idmap::NotODD& Lane::not_odd() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.not_odd)
  return _internal_not_odd();
}
inline void Lane::unsafe_arena_set_allocated_not_odd(
    ::idmap::NotODD* not_odd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(not_odd_);
  }
  not_odd_ = not_odd;
  if (not_odd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idmap.Lane.not_odd)
}
inline ::idmap::NotODD* Lane::release_not_odd() {
  
  ::idmap::NotODD* temp = not_odd_;
  not_odd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idmap::NotODD* Lane::unsafe_arena_release_not_odd() {
  // @@protoc_insertion_point(field_release:idmap.Lane.not_odd)
  
  ::idmap::NotODD* temp = not_odd_;
  not_odd_ = nullptr;
  return temp;
}
inline ::idmap::NotODD* Lane::_internal_mutable_not_odd() {
  
  if (not_odd_ == nullptr) {
    auto* p = CreateMaybeMessage<::idmap::NotODD>(GetArenaForAllocation());
    not_odd_ = p;
  }
  return not_odd_;
}
inline ::idmap::NotODD* Lane::mutable_not_odd() {
  ::idmap::NotODD* _msg = _internal_mutable_not_odd();
  // @@protoc_insertion_point(field_mutable:idmap.Lane.not_odd)
  return _msg;
}
inline void Lane::set_allocated_not_odd(::idmap::NotODD* not_odd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(not_odd_);
  }
  if (not_odd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(not_odd));
    if (message_arena != submessage_arena) {
      not_odd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_odd, submessage_arena);
    }
    
  } else {
    
  }
  not_odd_ = not_odd;
  // @@protoc_insertion_point(field_set_allocated:idmap.Lane.not_odd)
}

// uint32 in_navigation_route = 17;
inline void Lane::clear_in_navigation_route() {
  in_navigation_route_ = 0u;
}
inline uint32_t Lane::_internal_in_navigation_route() const {
  return in_navigation_route_;
}
inline uint32_t Lane::in_navigation_route() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.in_navigation_route)
  return _internal_in_navigation_route();
}
inline void Lane::_internal_set_in_navigation_route(uint32_t value) {
  
  in_navigation_route_ = value;
}
inline void Lane::set_in_navigation_route(uint32_t value) {
  _internal_set_in_navigation_route(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.in_navigation_route)
}

// .idmap.MapDataSource data_source = 18;
inline void Lane::clear_data_source() {
  data_source_ = 0;
}
inline ::idmap::MapDataSource Lane::_internal_data_source() const {
  return static_cast< ::idmap::MapDataSource >(data_source_);
}
inline ::idmap::MapDataSource Lane::data_source() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.data_source)
  return _internal_data_source();
}
inline void Lane::_internal_set_data_source(::idmap::MapDataSource value) {
  
  data_source_ = value;
}
inline void Lane::set_data_source(::idmap::MapDataSource value) {
  _internal_set_data_source(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.data_source)
}

// double lane_confidence = 19;
inline void Lane::clear_lane_confidence() {
  lane_confidence_ = 0;
}
inline double Lane::_internal_lane_confidence() const {
  return lane_confidence_;
}
inline double Lane::lane_confidence() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.lane_confidence)
  return _internal_lane_confidence();
}
inline void Lane::_internal_set_lane_confidence(double value) {
  
  lane_confidence_ = value;
}
inline void Lane::set_lane_confidence(double value) {
  _internal_set_lane_confidence(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.lane_confidence)
}

// repeated uint64 associated_lane_id = 20;
inline int Lane::_internal_associated_lane_id_size() const {
  return associated_lane_id_.size();
}
inline int Lane::associated_lane_id_size() const {
  return _internal_associated_lane_id_size();
}
inline void Lane::clear_associated_lane_id() {
  associated_lane_id_.Clear();
}
inline uint64_t Lane::_internal_associated_lane_id(int index) const {
  return associated_lane_id_.Get(index);
}
inline uint64_t Lane::associated_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.associated_lane_id)
  return _internal_associated_lane_id(index);
}
inline void Lane::set_associated_lane_id(int index, uint64_t value) {
  associated_lane_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:idmap.Lane.associated_lane_id)
}
inline void Lane::_internal_add_associated_lane_id(uint64_t value) {
  associated_lane_id_.Add(value);
}
inline void Lane::add_associated_lane_id(uint64_t value) {
  _internal_add_associated_lane_id(value);
  // @@protoc_insertion_point(field_add:idmap.Lane.associated_lane_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::_internal_associated_lane_id() const {
  return associated_lane_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::associated_lane_id() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.associated_lane_id)
  return _internal_associated_lane_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::_internal_mutable_associated_lane_id() {
  return &associated_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::mutable_associated_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.associated_lane_id)
  return _internal_mutable_associated_lane_id();
}

// repeated uint64 associated_line_id = 21;
inline int Lane::_internal_associated_line_id_size() const {
  return associated_line_id_.size();
}
inline int Lane::associated_line_id_size() const {
  return _internal_associated_line_id_size();
}
inline void Lane::clear_associated_line_id() {
  associated_line_id_.Clear();
}
inline uint64_t Lane::_internal_associated_line_id(int index) const {
  return associated_line_id_.Get(index);
}
inline uint64_t Lane::associated_line_id(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.associated_line_id)
  return _internal_associated_line_id(index);
}
inline void Lane::set_associated_line_id(int index, uint64_t value) {
  associated_line_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:idmap.Lane.associated_line_id)
}
inline void Lane::_internal_add_associated_line_id(uint64_t value) {
  associated_line_id_.Add(value);
}
inline void Lane::add_associated_line_id(uint64_t value) {
  _internal_add_associated_line_id(value);
  // @@protoc_insertion_point(field_add:idmap.Lane.associated_line_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::_internal_associated_line_id() const {
  return associated_line_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::associated_line_id() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.associated_line_id)
  return _internal_associated_line_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::_internal_mutable_associated_line_id() {
  return &associated_line_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::mutable_associated_line_id() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.associated_line_id)
  return _internal_mutable_associated_line_id();
}

// repeated uint64 associated_boundary_id = 22;
inline int Lane::_internal_associated_boundary_id_size() const {
  return associated_boundary_id_.size();
}
inline int Lane::associated_boundary_id_size() const {
  return _internal_associated_boundary_id_size();
}
inline void Lane::clear_associated_boundary_id() {
  associated_boundary_id_.Clear();
}
inline uint64_t Lane::_internal_associated_boundary_id(int index) const {
  return associated_boundary_id_.Get(index);
}
inline uint64_t Lane::associated_boundary_id(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Lane.associated_boundary_id)
  return _internal_associated_boundary_id(index);
}
inline void Lane::set_associated_boundary_id(int index, uint64_t value) {
  associated_boundary_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:idmap.Lane.associated_boundary_id)
}
inline void Lane::_internal_add_associated_boundary_id(uint64_t value) {
  associated_boundary_id_.Add(value);
}
inline void Lane::add_associated_boundary_id(uint64_t value) {
  _internal_add_associated_boundary_id(value);
  // @@protoc_insertion_point(field_add:idmap.Lane.associated_boundary_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::_internal_associated_boundary_id() const {
  return associated_boundary_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Lane::associated_boundary_id() const {
  // @@protoc_insertion_point(field_list:idmap.Lane.associated_boundary_id)
  return _internal_associated_boundary_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::_internal_mutable_associated_boundary_id() {
  return &associated_boundary_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Lane::mutable_associated_boundary_id() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Lane.associated_boundary_id)
  return _internal_mutable_associated_boundary_id();
}

// uint64 center_lane_sources = 23;
inline void Lane::clear_center_lane_sources() {
  center_lane_sources_ = uint64_t{0u};
}
inline uint64_t Lane::_internal_center_lane_sources() const {
  return center_lane_sources_;
}
inline uint64_t Lane::center_lane_sources() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.center_lane_sources)
  return _internal_center_lane_sources();
}
inline void Lane::_internal_set_center_lane_sources(uint64_t value) {
  
  center_lane_sources_ = value;
}
inline void Lane::set_center_lane_sources(uint64_t value) {
  _internal_set_center_lane_sources(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.center_lane_sources)
}

// uint32 crowd_source_collect_times = 24;
inline void Lane::clear_crowd_source_collect_times() {
  crowd_source_collect_times_ = 0u;
}
inline uint32_t Lane::_internal_crowd_source_collect_times() const {
  return crowd_source_collect_times_;
}
inline uint32_t Lane::crowd_source_collect_times() const {
  // @@protoc_insertion_point(field_get:idmap.Lane.crowd_source_collect_times)
  return _internal_crowd_source_collect_times();
}
inline void Lane::_internal_set_crowd_source_collect_times(uint32_t value) {
  
  crowd_source_collect_times_ = value;
}
inline void Lane::set_crowd_source_collect_times(uint32_t value) {
  _internal_set_crowd_source_collect_times(value);
  // @@protoc_insertion_point(field_set:idmap.Lane.crowd_source_collect_times)
}

// -------------------------------------------------------------------

// Line

// uint64 line_id = 1;
inline void Line::clear_line_id() {
  line_id_ = uint64_t{0u};
}
inline uint64_t Line::_internal_line_id() const {
  return line_id_;
}
inline uint64_t Line::line_id() const {
  // @@protoc_insertion_point(field_get:idmap.Line.line_id)
  return _internal_line_id();
}
inline void Line::_internal_set_line_id(uint64_t value) {
  
  line_id_ = value;
}
inline void Line::set_line_id(uint64_t value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:idmap.Line.line_id)
}

// repeated .idmap.Gnss line_points = 2;
inline int Line::_internal_line_points_size() const {
  return line_points_.size();
}
inline int Line::line_points_size() const {
  return _internal_line_points_size();
}
inline ::idmap::Gnss* Line::mutable_line_points(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.Line.line_points)
  return line_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
Line::mutable_line_points() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Line.line_points)
  return &line_points_;
}
inline const ::idmap::Gnss& Line::_internal_line_points(int index) const {
  return line_points_.Get(index);
}
inline const ::idmap::Gnss& Line::line_points(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Line.line_points)
  return _internal_line_points(index);
}
inline ::idmap::Gnss* Line::_internal_add_line_points() {
  return line_points_.Add();
}
inline ::idmap::Gnss* Line::add_line_points() {
  ::idmap::Gnss* _add = _internal_add_line_points();
  // @@protoc_insertion_point(field_add:idmap.Line.line_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
Line::line_points() const {
  // @@protoc_insertion_point(field_list:idmap.Line.line_points)
  return line_points_;
}

// repeated .idmap.LineType line_type = 3;
inline int Line::_internal_line_type_size() const {
  return line_type_.size();
}
inline int Line::line_type_size() const {
  return _internal_line_type_size();
}
inline void Line::clear_line_type() {
  line_type_.Clear();
}
inline ::idmap::LineType Line::_internal_line_type(int index) const {
  return static_cast< ::idmap::LineType >(line_type_.Get(index));
}
inline ::idmap::LineType Line::line_type(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Line.line_type)
  return _internal_line_type(index);
}
inline void Line::set_line_type(int index, ::idmap::LineType value) {
  line_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:idmap.Line.line_type)
}
inline void Line::_internal_add_line_type(::idmap::LineType value) {
  line_type_.Add(value);
}
inline void Line::add_line_type(::idmap::LineType value) {
  _internal_add_line_type(value);
  // @@protoc_insertion_point(field_add:idmap.Line.line_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Line::line_type() const {
  // @@protoc_insertion_point(field_list:idmap.Line.line_type)
  return line_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Line::_internal_mutable_line_type() {
  return &line_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Line::mutable_line_type() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Line.line_type)
  return _internal_mutable_line_type();
}

// .idmap.LineMarkingType linemarking_type = 4;
inline void Line::clear_linemarking_type() {
  linemarking_type_ = 0;
}
inline ::idmap::LineMarkingType Line::_internal_linemarking_type() const {
  return static_cast< ::idmap::LineMarkingType >(linemarking_type_);
}
inline ::idmap::LineMarkingType Line::linemarking_type() const {
  // @@protoc_insertion_point(field_get:idmap.Line.linemarking_type)
  return _internal_linemarking_type();
}
inline void Line::_internal_set_linemarking_type(::idmap::LineMarkingType value) {
  
  linemarking_type_ = value;
}
inline void Line::set_linemarking_type(::idmap::LineMarkingType value) {
  _internal_set_linemarking_type(value);
  // @@protoc_insertion_point(field_set:idmap.Line.linemarking_type)
}

// .idmap.Color color = 5;
inline void Line::clear_color() {
  color_ = 0;
}
inline ::idmap::Color Line::_internal_color() const {
  return static_cast< ::idmap::Color >(color_);
}
inline ::idmap::Color Line::color() const {
  // @@protoc_insertion_point(field_get:idmap.Line.color)
  return _internal_color();
}
inline void Line::_internal_set_color(::idmap::Color value) {
  
  color_ = value;
}
inline void Line::set_color(::idmap::Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:idmap.Line.color)
}

// double line_confidence = 6;
inline void Line::clear_line_confidence() {
  line_confidence_ = 0;
}
inline double Line::_internal_line_confidence() const {
  return line_confidence_;
}
inline double Line::line_confidence() const {
  // @@protoc_insertion_point(field_get:idmap.Line.line_confidence)
  return _internal_line_confidence();
}
inline void Line::_internal_set_line_confidence(double value) {
  
  line_confidence_ = value;
}
inline void Line::set_line_confidence(double value) {
  _internal_set_line_confidence(value);
  // @@protoc_insertion_point(field_set:idmap.Line.line_confidence)
}

// -------------------------------------------------------------------

// RoadBoundary

// uint64 road_boundary_id = 1;
inline void RoadBoundary::clear_road_boundary_id() {
  road_boundary_id_ = uint64_t{0u};
}
inline uint64_t RoadBoundary::_internal_road_boundary_id() const {
  return road_boundary_id_;
}
inline uint64_t RoadBoundary::road_boundary_id() const {
  // @@protoc_insertion_point(field_get:idmap.RoadBoundary.road_boundary_id)
  return _internal_road_boundary_id();
}
inline void RoadBoundary::_internal_set_road_boundary_id(uint64_t value) {
  
  road_boundary_id_ = value;
}
inline void RoadBoundary::set_road_boundary_id(uint64_t value) {
  _internal_set_road_boundary_id(value);
  // @@protoc_insertion_point(field_set:idmap.RoadBoundary.road_boundary_id)
}

// repeated .idmap.Gnss boundary_points = 2;
inline int RoadBoundary::_internal_boundary_points_size() const {
  return boundary_points_.size();
}
inline int RoadBoundary::boundary_points_size() const {
  return _internal_boundary_points_size();
}
inline ::idmap::Gnss* RoadBoundary::mutable_boundary_points(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.RoadBoundary.boundary_points)
  return boundary_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
RoadBoundary::mutable_boundary_points() {
  // @@protoc_insertion_point(field_mutable_list:idmap.RoadBoundary.boundary_points)
  return &boundary_points_;
}
inline const ::idmap::Gnss& RoadBoundary::_internal_boundary_points(int index) const {
  return boundary_points_.Get(index);
}
inline const ::idmap::Gnss& RoadBoundary::boundary_points(int index) const {
  // @@protoc_insertion_point(field_get:idmap.RoadBoundary.boundary_points)
  return _internal_boundary_points(index);
}
inline ::idmap::Gnss* RoadBoundary::_internal_add_boundary_points() {
  return boundary_points_.Add();
}
inline ::idmap::Gnss* RoadBoundary::add_boundary_points() {
  ::idmap::Gnss* _add = _internal_add_boundary_points();
  // @@protoc_insertion_point(field_add:idmap.RoadBoundary.boundary_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
RoadBoundary::boundary_points() const {
  // @@protoc_insertion_point(field_list:idmap.RoadBoundary.boundary_points)
  return boundary_points_;
}

// .idmap.RoadBoundaryType boundary_type = 3;
inline void RoadBoundary::clear_boundary_type() {
  boundary_type_ = 0;
}
inline ::idmap::RoadBoundaryType RoadBoundary::_internal_boundary_type() const {
  return static_cast< ::idmap::RoadBoundaryType >(boundary_type_);
}
inline ::idmap::RoadBoundaryType RoadBoundary::boundary_type() const {
  // @@protoc_insertion_point(field_get:idmap.RoadBoundary.boundary_type)
  return _internal_boundary_type();
}
inline void RoadBoundary::_internal_set_boundary_type(::idmap::RoadBoundaryType value) {
  
  boundary_type_ = value;
}
inline void RoadBoundary::set_boundary_type(::idmap::RoadBoundaryType value) {
  _internal_set_boundary_type(value);
  // @@protoc_insertion_point(field_set:idmap.RoadBoundary.boundary_type)
}

// double boundary_confidence = 4;
inline void RoadBoundary::clear_boundary_confidence() {
  boundary_confidence_ = 0;
}
inline double RoadBoundary::_internal_boundary_confidence() const {
  return boundary_confidence_;
}
inline double RoadBoundary::boundary_confidence() const {
  // @@protoc_insertion_point(field_get:idmap.RoadBoundary.boundary_confidence)
  return _internal_boundary_confidence();
}
inline void RoadBoundary::_internal_set_boundary_confidence(double value) {
  
  boundary_confidence_ = value;
}
inline void RoadBoundary::set_boundary_confidence(double value) {
  _internal_set_boundary_confidence(value);
  // @@protoc_insertion_point(field_set:idmap.RoadBoundary.boundary_confidence)
}

// -------------------------------------------------------------------

// GroundMarking

// uint64 groundmarking_id = 1;
inline void GroundMarking::clear_groundmarking_id() {
  groundmarking_id_ = uint64_t{0u};
}
inline uint64_t GroundMarking::_internal_groundmarking_id() const {
  return groundmarking_id_;
}
inline uint64_t GroundMarking::groundmarking_id() const {
  // @@protoc_insertion_point(field_get:idmap.GroundMarking.groundmarking_id)
  return _internal_groundmarking_id();
}
inline void GroundMarking::_internal_set_groundmarking_id(uint64_t value) {
  
  groundmarking_id_ = value;
}
inline void GroundMarking::set_groundmarking_id(uint64_t value) {
  _internal_set_groundmarking_id(value);
  // @@protoc_insertion_point(field_set:idmap.GroundMarking.groundmarking_id)
}

// repeated .idmap.Gnss points = 2;
inline int GroundMarking::_internal_points_size() const {
  return points_.size();
}
inline int GroundMarking::points_size() const {
  return _internal_points_size();
}
inline ::idmap::Gnss* GroundMarking::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.GroundMarking.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
GroundMarking::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:idmap.GroundMarking.points)
  return &points_;
}
inline const ::idmap::Gnss& GroundMarking::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::idmap::Gnss& GroundMarking::points(int index) const {
  // @@protoc_insertion_point(field_get:idmap.GroundMarking.points)
  return _internal_points(index);
}
inline ::idmap::Gnss* GroundMarking::_internal_add_points() {
  return points_.Add();
}
inline ::idmap::Gnss* GroundMarking::add_points() {
  ::idmap::Gnss* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:idmap.GroundMarking.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
GroundMarking::points() const {
  // @@protoc_insertion_point(field_list:idmap.GroundMarking.points)
  return points_;
}

// .idmap.GroundMarkType gdm_type = 3;
inline void GroundMarking::clear_gdm_type() {
  gdm_type_ = 0;
}
inline ::idmap::GroundMarkType GroundMarking::_internal_gdm_type() const {
  return static_cast< ::idmap::GroundMarkType >(gdm_type_);
}
inline ::idmap::GroundMarkType GroundMarking::gdm_type() const {
  // @@protoc_insertion_point(field_get:idmap.GroundMarking.gdm_type)
  return _internal_gdm_type();
}
inline void GroundMarking::_internal_set_gdm_type(::idmap::GroundMarkType value) {
  
  gdm_type_ = value;
}
inline void GroundMarking::set_gdm_type(::idmap::GroundMarkType value) {
  _internal_set_gdm_type(value);
  // @@protoc_insertion_point(field_set:idmap.GroundMarking.gdm_type)
}

// string sign_value = 4;
inline void GroundMarking::clear_sign_value() {
  sign_value_.ClearToEmpty();
}
inline const std::string& GroundMarking::sign_value() const {
  // @@protoc_insertion_point(field_get:idmap.GroundMarking.sign_value)
  return _internal_sign_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroundMarking::set_sign_value(ArgT0&& arg0, ArgT... args) {
 
 sign_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idmap.GroundMarking.sign_value)
}
inline std::string* GroundMarking::mutable_sign_value() {
  std::string* _s = _internal_mutable_sign_value();
  // @@protoc_insertion_point(field_mutable:idmap.GroundMarking.sign_value)
  return _s;
}
inline const std::string& GroundMarking::_internal_sign_value() const {
  return sign_value_.Get();
}
inline void GroundMarking::_internal_set_sign_value(const std::string& value) {
  
  sign_value_.Set(value, GetArenaForAllocation());
}
inline std::string* GroundMarking::_internal_mutable_sign_value() {
  
  return sign_value_.Mutable(GetArenaForAllocation());
}
inline std::string* GroundMarking::release_sign_value() {
  // @@protoc_insertion_point(field_release:idmap.GroundMarking.sign_value)
  return sign_value_.Release();
}
inline void GroundMarking::set_allocated_sign_value(std::string* sign_value) {
  if (sign_value != nullptr) {
    
  } else {
    
  }
  sign_value_.SetAllocated(sign_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_value_.IsDefault()) {
    sign_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idmap.GroundMarking.sign_value)
}

// .idmap.Color color = 5;
inline void GroundMarking::clear_color() {
  color_ = 0;
}
inline ::idmap::Color GroundMarking::_internal_color() const {
  return static_cast< ::idmap::Color >(color_);
}
inline ::idmap::Color GroundMarking::color() const {
  // @@protoc_insertion_point(field_get:idmap.GroundMarking.color)
  return _internal_color();
}
inline void GroundMarking::_internal_set_color(::idmap::Color value) {
  
  color_ = value;
}
inline void GroundMarking::set_color(::idmap::Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:idmap.GroundMarking.color)
}

// .idmap.GroundMarkPattern gdp_type = 6;
inline void GroundMarking::clear_gdp_type() {
  gdp_type_ = 0;
}
inline ::idmap::GroundMarkPattern GroundMarking::_internal_gdp_type() const {
  return static_cast< ::idmap::GroundMarkPattern >(gdp_type_);
}
inline ::idmap::GroundMarkPattern GroundMarking::gdp_type() const {
  // @@protoc_insertion_point(field_get:idmap.GroundMarking.gdp_type)
  return _internal_gdp_type();
}
inline void GroundMarking::_internal_set_gdp_type(::idmap::GroundMarkPattern value) {
  
  gdp_type_ = value;
}
inline void GroundMarking::set_gdp_type(::idmap::GroundMarkPattern value) {
  _internal_set_gdp_type(value);
  // @@protoc_insertion_point(field_set:idmap.GroundMarking.gdp_type)
}

// repeated uint64 lane_id_groundmarking = 7;
inline int GroundMarking::_internal_lane_id_groundmarking_size() const {
  return lane_id_groundmarking_.size();
}
inline int GroundMarking::lane_id_groundmarking_size() const {
  return _internal_lane_id_groundmarking_size();
}
inline void GroundMarking::clear_lane_id_groundmarking() {
  lane_id_groundmarking_.Clear();
}
inline uint64_t GroundMarking::_internal_lane_id_groundmarking(int index) const {
  return lane_id_groundmarking_.Get(index);
}
inline uint64_t GroundMarking::lane_id_groundmarking(int index) const {
  // @@protoc_insertion_point(field_get:idmap.GroundMarking.lane_id_groundmarking)
  return _internal_lane_id_groundmarking(index);
}
inline void GroundMarking::set_lane_id_groundmarking(int index, uint64_t value) {
  lane_id_groundmarking_.Set(index, value);
  // @@protoc_insertion_point(field_set:idmap.GroundMarking.lane_id_groundmarking)
}
inline void GroundMarking::_internal_add_lane_id_groundmarking(uint64_t value) {
  lane_id_groundmarking_.Add(value);
}
inline void GroundMarking::add_lane_id_groundmarking(uint64_t value) {
  _internal_add_lane_id_groundmarking(value);
  // @@protoc_insertion_point(field_add:idmap.GroundMarking.lane_id_groundmarking)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GroundMarking::_internal_lane_id_groundmarking() const {
  return lane_id_groundmarking_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GroundMarking::lane_id_groundmarking() const {
  // @@protoc_insertion_point(field_list:idmap.GroundMarking.lane_id_groundmarking)
  return _internal_lane_id_groundmarking();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GroundMarking::_internal_mutable_lane_id_groundmarking() {
  return &lane_id_groundmarking_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GroundMarking::mutable_lane_id_groundmarking() {
  // @@protoc_insertion_point(field_mutable_list:idmap.GroundMarking.lane_id_groundmarking)
  return _internal_mutable_lane_id_groundmarking();
}

// -------------------------------------------------------------------

// MapTrafficLight

// .idmap.Gnss gnss_position = 1;
inline bool MapTrafficLight::_internal_has_gnss_position() const {
  return this != internal_default_instance() && gnss_position_ != nullptr;
}
inline bool MapTrafficLight::has_gnss_position() const {
  return _internal_has_gnss_position();
}
inline const ::idmap::Gnss& MapTrafficLight::_internal_gnss_position() const {
  const ::idmap::Gnss* p = gnss_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::idmap::Gnss&>(
      ::idmap::_Gnss_default_instance_);
}
inline const ::idmap::Gnss& MapTrafficLight::gnss_position() const {
  // @@protoc_insertion_point(field_get:idmap.MapTrafficLight.gnss_position)
  return _internal_gnss_position();
}
inline void MapTrafficLight::unsafe_arena_set_allocated_gnss_position(
    ::idmap::Gnss* gnss_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnss_position_);
  }
  gnss_position_ = gnss_position;
  if (gnss_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idmap.MapTrafficLight.gnss_position)
}
inline ::idmap::Gnss* MapTrafficLight::release_gnss_position() {
  
  ::idmap::Gnss* temp = gnss_position_;
  gnss_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idmap::Gnss* MapTrafficLight::unsafe_arena_release_gnss_position() {
  // @@protoc_insertion_point(field_release:idmap.MapTrafficLight.gnss_position)
  
  ::idmap::Gnss* temp = gnss_position_;
  gnss_position_ = nullptr;
  return temp;
}
inline ::idmap::Gnss* MapTrafficLight::_internal_mutable_gnss_position() {
  
  if (gnss_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::idmap::Gnss>(GetArenaForAllocation());
    gnss_position_ = p;
  }
  return gnss_position_;
}
inline ::idmap::Gnss* MapTrafficLight::mutable_gnss_position() {
  ::idmap::Gnss* _msg = _internal_mutable_gnss_position();
  // @@protoc_insertion_point(field_mutable:idmap.MapTrafficLight.gnss_position)
  return _msg;
}
inline void MapTrafficLight::set_allocated_gnss_position(::idmap::Gnss* gnss_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnss_position_);
  }
  if (gnss_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnss_position));
    if (message_arena != submessage_arena) {
      gnss_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_position, submessage_arena);
    }
    
  } else {
    
  }
  gnss_position_ = gnss_position;
  // @@protoc_insertion_point(field_set_allocated:idmap.MapTrafficLight.gnss_position)
}

// repeated uint64 lane_id_tfc_light = 2;
inline int MapTrafficLight::_internal_lane_id_tfc_light_size() const {
  return lane_id_tfc_light_.size();
}
inline int MapTrafficLight::lane_id_tfc_light_size() const {
  return _internal_lane_id_tfc_light_size();
}
inline void MapTrafficLight::clear_lane_id_tfc_light() {
  lane_id_tfc_light_.Clear();
}
inline uint64_t MapTrafficLight::_internal_lane_id_tfc_light(int index) const {
  return lane_id_tfc_light_.Get(index);
}
inline uint64_t MapTrafficLight::lane_id_tfc_light(int index) const {
  // @@protoc_insertion_point(field_get:idmap.MapTrafficLight.lane_id_tfc_light)
  return _internal_lane_id_tfc_light(index);
}
inline void MapTrafficLight::set_lane_id_tfc_light(int index, uint64_t value) {
  lane_id_tfc_light_.Set(index, value);
  // @@protoc_insertion_point(field_set:idmap.MapTrafficLight.lane_id_tfc_light)
}
inline void MapTrafficLight::_internal_add_lane_id_tfc_light(uint64_t value) {
  lane_id_tfc_light_.Add(value);
}
inline void MapTrafficLight::add_lane_id_tfc_light(uint64_t value) {
  _internal_add_lane_id_tfc_light(value);
  // @@protoc_insertion_point(field_add:idmap.MapTrafficLight.lane_id_tfc_light)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
MapTrafficLight::_internal_lane_id_tfc_light() const {
  return lane_id_tfc_light_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
MapTrafficLight::lane_id_tfc_light() const {
  // @@protoc_insertion_point(field_list:idmap.MapTrafficLight.lane_id_tfc_light)
  return _internal_lane_id_tfc_light();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
MapTrafficLight::_internal_mutable_lane_id_tfc_light() {
  return &lane_id_tfc_light_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
MapTrafficLight::mutable_lane_id_tfc_light() {
  // @@protoc_insertion_point(field_mutable_list:idmap.MapTrafficLight.lane_id_tfc_light)
  return _internal_mutable_lane_id_tfc_light();
}

// uint64 traffic_light_id = 3;
inline void MapTrafficLight::clear_traffic_light_id() {
  traffic_light_id_ = uint64_t{0u};
}
inline uint64_t MapTrafficLight::_internal_traffic_light_id() const {
  return traffic_light_id_;
}
inline uint64_t MapTrafficLight::traffic_light_id() const {
  // @@protoc_insertion_point(field_get:idmap.MapTrafficLight.traffic_light_id)
  return _internal_traffic_light_id();
}
inline void MapTrafficLight::_internal_set_traffic_light_id(uint64_t value) {
  
  traffic_light_id_ = value;
}
inline void MapTrafficLight::set_traffic_light_id(uint64_t value) {
  _internal_set_traffic_light_id(value);
  // @@protoc_insertion_point(field_set:idmap.MapTrafficLight.traffic_light_id)
}

// -------------------------------------------------------------------

// MapTrafficSign

// .idmap.SignType sign_type = 1;
inline void MapTrafficSign::clear_sign_type() {
  sign_type_ = 0;
}
inline ::idmap::SignType MapTrafficSign::_internal_sign_type() const {
  return static_cast< ::idmap::SignType >(sign_type_);
}
inline ::idmap::SignType MapTrafficSign::sign_type() const {
  // @@protoc_insertion_point(field_get:idmap.MapTrafficSign.sign_type)
  return _internal_sign_type();
}
inline void MapTrafficSign::_internal_set_sign_type(::idmap::SignType value) {
  
  sign_type_ = value;
}
inline void MapTrafficSign::set_sign_type(::idmap::SignType value) {
  _internal_set_sign_type(value);
  // @@protoc_insertion_point(field_set:idmap.MapTrafficSign.sign_type)
}

// .idmap.Gnss center_position = 2;
inline bool MapTrafficSign::_internal_has_center_position() const {
  return this != internal_default_instance() && center_position_ != nullptr;
}
inline bool MapTrafficSign::has_center_position() const {
  return _internal_has_center_position();
}
inline const ::idmap::Gnss& MapTrafficSign::_internal_center_position() const {
  const ::idmap::Gnss* p = center_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::idmap::Gnss&>(
      ::idmap::_Gnss_default_instance_);
}
inline const ::idmap::Gnss& MapTrafficSign::center_position() const {
  // @@protoc_insertion_point(field_get:idmap.MapTrafficSign.center_position)
  return _internal_center_position();
}
inline void MapTrafficSign::unsafe_arena_set_allocated_center_position(
    ::idmap::Gnss* center_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_position_);
  }
  center_position_ = center_position;
  if (center_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idmap.MapTrafficSign.center_position)
}
inline ::idmap::Gnss* MapTrafficSign::release_center_position() {
  
  ::idmap::Gnss* temp = center_position_;
  center_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::idmap::Gnss* MapTrafficSign::unsafe_arena_release_center_position() {
  // @@protoc_insertion_point(field_release:idmap.MapTrafficSign.center_position)
  
  ::idmap::Gnss* temp = center_position_;
  center_position_ = nullptr;
  return temp;
}
inline ::idmap::Gnss* MapTrafficSign::_internal_mutable_center_position() {
  
  if (center_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::idmap::Gnss>(GetArenaForAllocation());
    center_position_ = p;
  }
  return center_position_;
}
inline ::idmap::Gnss* MapTrafficSign::mutable_center_position() {
  ::idmap::Gnss* _msg = _internal_mutable_center_position();
  // @@protoc_insertion_point(field_mutable:idmap.MapTrafficSign.center_position)
  return _msg;
}
inline void MapTrafficSign::set_allocated_center_position(::idmap::Gnss* center_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_position_);
  }
  if (center_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_position));
    if (message_arena != submessage_arena) {
      center_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_position, submessage_arena);
    }
    
  } else {
    
  }
  center_position_ = center_position;
  // @@protoc_insertion_point(field_set_allocated:idmap.MapTrafficSign.center_position)
}

// string sign_value = 3;
inline void MapTrafficSign::clear_sign_value() {
  sign_value_.ClearToEmpty();
}
inline const std::string& MapTrafficSign::sign_value() const {
  // @@protoc_insertion_point(field_get:idmap.MapTrafficSign.sign_value)
  return _internal_sign_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapTrafficSign::set_sign_value(ArgT0&& arg0, ArgT... args) {
 
 sign_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idmap.MapTrafficSign.sign_value)
}
inline std::string* MapTrafficSign::mutable_sign_value() {
  std::string* _s = _internal_mutable_sign_value();
  // @@protoc_insertion_point(field_mutable:idmap.MapTrafficSign.sign_value)
  return _s;
}
inline const std::string& MapTrafficSign::_internal_sign_value() const {
  return sign_value_.Get();
}
inline void MapTrafficSign::_internal_set_sign_value(const std::string& value) {
  
  sign_value_.Set(value, GetArenaForAllocation());
}
inline std::string* MapTrafficSign::_internal_mutable_sign_value() {
  
  return sign_value_.Mutable(GetArenaForAllocation());
}
inline std::string* MapTrafficSign::release_sign_value() {
  // @@protoc_insertion_point(field_release:idmap.MapTrafficSign.sign_value)
  return sign_value_.Release();
}
inline void MapTrafficSign::set_allocated_sign_value(std::string* sign_value) {
  if (sign_value != nullptr) {
    
  } else {
    
  }
  sign_value_.SetAllocated(sign_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_value_.IsDefault()) {
    sign_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idmap.MapTrafficSign.sign_value)
}

// uint64 lane_id_tfc_sign = 4;
inline void MapTrafficSign::clear_lane_id_tfc_sign() {
  lane_id_tfc_sign_ = uint64_t{0u};
}
inline uint64_t MapTrafficSign::_internal_lane_id_tfc_sign() const {
  return lane_id_tfc_sign_;
}
inline uint64_t MapTrafficSign::lane_id_tfc_sign() const {
  // @@protoc_insertion_point(field_get:idmap.MapTrafficSign.lane_id_tfc_sign)
  return _internal_lane_id_tfc_sign();
}
inline void MapTrafficSign::_internal_set_lane_id_tfc_sign(uint64_t value) {
  
  lane_id_tfc_sign_ = value;
}
inline void MapTrafficSign::set_lane_id_tfc_sign(uint64_t value) {
  _internal_set_lane_id_tfc_sign(value);
  // @@protoc_insertion_point(field_set:idmap.MapTrafficSign.lane_id_tfc_sign)
}

// uint64 traffic_sign_id = 5;
inline void MapTrafficSign::clear_traffic_sign_id() {
  traffic_sign_id_ = uint64_t{0u};
}
inline uint64_t MapTrafficSign::_internal_traffic_sign_id() const {
  return traffic_sign_id_;
}
inline uint64_t MapTrafficSign::traffic_sign_id() const {
  // @@protoc_insertion_point(field_get:idmap.MapTrafficSign.traffic_sign_id)
  return _internal_traffic_sign_id();
}
inline void MapTrafficSign::_internal_set_traffic_sign_id(uint64_t value) {
  
  traffic_sign_id_ = value;
}
inline void MapTrafficSign::set_traffic_sign_id(uint64_t value) {
  _internal_set_traffic_sign_id(value);
  // @@protoc_insertion_point(field_set:idmap.MapTrafficSign.traffic_sign_id)
}

// -------------------------------------------------------------------

// Toll

// uint64 toll_id = 1;
inline void Toll::clear_toll_id() {
  toll_id_ = uint64_t{0u};
}
inline uint64_t Toll::_internal_toll_id() const {
  return toll_id_;
}
inline uint64_t Toll::toll_id() const {
  // @@protoc_insertion_point(field_get:idmap.Toll.toll_id)
  return _internal_toll_id();
}
inline void Toll::_internal_set_toll_id(uint64_t value) {
  
  toll_id_ = value;
}
inline void Toll::set_toll_id(uint64_t value) {
  _internal_set_toll_id(value);
  // @@protoc_insertion_point(field_set:idmap.Toll.toll_id)
}

// repeated .idmap.Gnss gnss_toll = 2;
inline int Toll::_internal_gnss_toll_size() const {
  return gnss_toll_.size();
}
inline int Toll::gnss_toll_size() const {
  return _internal_gnss_toll_size();
}
inline ::idmap::Gnss* Toll::mutable_gnss_toll(int index) {
  // @@protoc_insertion_point(field_mutable:idmap.Toll.gnss_toll)
  return gnss_toll_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >*
Toll::mutable_gnss_toll() {
  // @@protoc_insertion_point(field_mutable_list:idmap.Toll.gnss_toll)
  return &gnss_toll_;
}
inline const ::idmap::Gnss& Toll::_internal_gnss_toll(int index) const {
  return gnss_toll_.Get(index);
}
inline const ::idmap::Gnss& Toll::gnss_toll(int index) const {
  // @@protoc_insertion_point(field_get:idmap.Toll.gnss_toll)
  return _internal_gnss_toll(index);
}
inline ::idmap::Gnss* Toll::_internal_add_gnss_toll() {
  return gnss_toll_.Add();
}
inline ::idmap::Gnss* Toll::add_gnss_toll() {
  ::idmap::Gnss* _add = _internal_add_gnss_toll();
  // @@protoc_insertion_point(field_add:idmap.Toll.gnss_toll)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idmap::Gnss >&
Toll::gnss_toll() const {
  // @@protoc_insertion_point(field_list:idmap.Toll.gnss_toll)
  return gnss_toll_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_idmap_5fstatic_2eproto
